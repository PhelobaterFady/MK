{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User schema\nexport const userSchema = z.object({\n  id: z.string(),\n  email: z.string().email(),\n  username: z.string().min(3).max(20),\n  displayName: z.string().optional(),\n  photoURL: z.string().optional(),\n  role: z.enum([\"user\", \"vip\", \"admin\"]).default(\"user\"),\n  level: z.number().default(1),\n  totalTrades: z.number().default(0),\n  walletBalance: z.number().default(0),\n  rating: z.number().min(0).max(5).default(0),\n  reviewCount: z.number().default(0),\n  badges: z.array(z.string()).default([]),\n  joinDate: z.date(),\n  lastActive: z.date().optional(),\n  isVerified: z.boolean().default(false),\n  isBanned: z.boolean().default(false)\n});\n\nexport const insertUserSchema = userSchema.omit({ id: true });\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\n// Game Account schema\nexport const gameAccountSchema = z.object({\n  id: z.string(),\n  sellerId: z.string(),\n  game: z.enum([\"fifa\", \"valorant\", \"lol\", \"pubg\", \"cod\"]),\n  title: z.string().min(10).max(100),\n  description: z.string().min(50).max(1000),\n  price: z.number().min(1),\n  images: z.array(z.string()).default([]),\n  gameSpecificData: z.record(z.any()), // Game-specific fields\n  status: z.enum([\"active\", \"sold\", \"pending\", \"removed\"]).default(\"active\"),\n  views: z.number().default(0),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  featuredUntil: z.date().optional()\n});\n\nexport const insertGameAccountSchema = gameAccountSchema.omit({ \n  id: true, \n  views: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport type GameAccount = z.infer<typeof gameAccountSchema>;\nexport type InsertGameAccount = z.infer<typeof insertGameAccountSchema>;\n\n// Order schema\nexport const orderSchema = z.object({\n  id: z.string(),\n  buyerId: z.string(),\n  sellerId: z.string(),\n  accountId: z.string(),\n  amount: z.number(),\n  status: z.enum([\"pending\", \"escrow\", \"delivered\", \"completed\", \"disputed\", \"cancelled\"]),\n  escrowAmount: z.number(),\n  createdAt: z.date(),\n  deliveredAt: z.date().optional(),\n  completedAt: z.date().optional(),\n  notes: z.string().optional()\n});\n\nexport const insertOrderSchema = orderSchema.omit({ \n  id: true, \n  createdAt: true \n});\n\nexport type Order = z.infer<typeof orderSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\n// Chat Message schema\nexport const chatMessageSchema = z.object({\n  id: z.string(),\n  orderId: z.string(),\n  senderId: z.string(),\n  content: z.string().max(500),\n  timestamp: z.date(),\n  isFiltered: z.boolean().default(false),\n  filteredReason: z.string().optional()\n});\n\nexport const insertChatMessageSchema = chatMessageSchema.omit({ \n  id: true, \n  timestamp: true \n});\n\nexport type ChatMessage = z.infer<typeof chatMessageSchema>;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\n// Wallet Transaction schema\nexport const walletTransactionSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  type: z.enum([\"topup\", \"withdraw\", \"purchase\", \"sale\", \"fee\", \"refund\"]),\n  amount: z.number(),\n  description: z.string(),\n  status: z.enum([\"pending\", \"completed\", \"failed\", \"cancelled\"]),\n  paymentMethod: z.string().optional(),\n  externalTransactionId: z.string().optional(),\n  createdAt: z.date(),\n  completedAt: z.date().optional()\n});\n\nexport const insertWalletTransactionSchema = walletTransactionSchema.omit({ \n  id: true, \n  createdAt: true \n});\n\nexport type WalletTransaction = z.infer<typeof walletTransactionSchema>;\nexport type InsertWalletTransaction = z.infer<typeof insertWalletTransactionSchema>;\n\n// Wallet Request schema (for admin approval)\nexport const walletRequestSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  type: z.enum([\"topup\", \"withdraw\"]),\n  amount: z.number(),\n  amountAfterFee: z.number(),\n  walletName: z.string().optional(),\n  paymentMethod: z.string().optional(),\n  accountDetails: z.string().optional(),\n  status: z.enum([\"pending\", \"approved\", \"rejected\", \"completed\"]),\n  adminId: z.string().optional(),\n  adminNotes: z.string().optional(),\n  createdAt: z.date(),\n  processedAt: z.date().optional()\n});\n\nexport const insertWalletRequestSchema = walletRequestSchema.omit({ \n  id: true, \n  createdAt: true \n});\n\nexport type WalletRequest = z.infer<typeof walletRequestSchema>;\nexport type InsertWalletRequest = z.infer<typeof insertWalletRequestSchema>;\n\n// Support Ticket schema\nexport const supportTicketSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  category: z.enum([\"account\", \"payment\", \"order\", \"technical\", \"security\", \"other\"]),\n  subject: z.string().max(100),\n  description: z.string().max(1000),\n  priority: z.enum([\"low\", \"medium\", \"high\"]),\n  status: z.enum([\"open\", \"in_progress\", \"resolved\", \"closed\"]),\n  orderId: z.string().optional(),\n  adminId: z.string().optional(),\n  adminResponse: z.string().optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  resolvedAt: z.date().optional()\n});\n\nexport const insertSupportTicketSchema = supportTicketSchema.omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport type SupportTicket = z.infer<typeof supportTicketSchema>;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\n\n// Game-specific field schemas\nexport const fifaAccountFields = z.object({\n  platform: z.enum([\"PS4\", \"PS5\", \"Xbox\", \"PC\"]),\n  coins: z.number(),\n  level: z.number(),\n  overallRating: z.number(),\n  region: z.string(),\n  transferBan: z.boolean().default(false)\n});\n\nexport const valorantAccountFields = z.object({\n  rank: z.string(),\n  rr: z.number(),\n  agents: z.number(),\n  skins: z.number(),\n  region: z.string(),\n  level: z.number()\n});\n\nexport const lolAccountFields = z.object({\n  rank: z.string(),\n  lp: z.number(),\n  champions: z.number(),\n  skins: z.number(),\n  region: z.string(),\n  level: z.number(),\n  blueEssence: z.number()\n});\n\nexport const pubgAccountFields = z.object({\n  rank: z.string(),\n  level: z.number(),\n  bp: z.number(),\n  skins: z.number(),\n  region: z.string(),\n  tier: z.string()\n});\n\nexport const codAccountFields = z.object({\n  rank: z.string(),\n  level: z.number(),\n  prestige: z.number(),\n  kd: z.number(),\n  wins: z.number(),\n  region: z.string()\n});\n\nexport type FifaAccountFields = z.infer<typeof fifaAccountFields>;\nexport type ValorantAccountFields = z.infer<typeof valorantAccountFields>;\nexport type LolAccountFields = z.infer<typeof lolAccountFields>;\nexport type PubgAccountFields = z.infer<typeof pubgAccountFields>;\nexport type CodAccountFields = z.infer<typeof codAccountFields>;\n","size_bytes":6523},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { ThemeProvider } from \"./contexts/ThemeContext\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport Layout from \"./components/Layout\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/Home\";\nimport Login from \"@/pages/Login\";\nimport Marketplace from \"@/pages/Marketplace\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Wallet from \"@/pages/Wallet\";\nimport Support from \"@/pages/Support\";\nimport Chat from \"@/pages/Chat\";\nimport Admin from \"@/pages/Admin\";\nimport AccountDetails from \"@/pages/AccountDetails\";\nimport SellAccount from \"@/pages/SellAccount\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/marketplace\" component={Marketplace} />\n      <Route path=\"/account/:id\" component={AccountDetails} />\n      \n      {/* Protected Routes */}\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/wallet\">\n        <ProtectedRoute>\n          <Wallet />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/support\">\n        <ProtectedRoute>\n          <Support />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/chat/:orderId?\">\n        <ProtectedRoute>\n          <Chat />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route path=\"/sell\">\n        <ProtectedRoute>\n          <SellAccount />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Admin Only Routes */}\n      <Route path=\"/admin\">\n        <ProtectedRoute adminOnly>\n          <Admin />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <TooltipProvider>\n            <Layout>\n              <Toaster />\n              <Router />\n            </Layout>\n          </TooltipProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2469},"client/src/index.css":{"content":"/* Font Awesome Icons Support */\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(222, 84%, 8%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 1px 2px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 1px 2px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 2px 4px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 4px 6px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 8px 10px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.light {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 8%);\n  --card: hsl(180, 7%, 97%);\n  --card-foreground: hsl(210, 25%, 8%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 8%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 8%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 2%, 90%);\n  --muted-foreground: hsl(210, 25%, 8%);\n  --accent: hsl(212, 51%, 93%);\n  --accent-foreground: hsl(217, 91%, 60%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201, 30%, 91%);\n  --input: hsl(200, 23%, 97%);\n  --ring: hsl(203, 89%, 53%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(180, 7%, 97%);\n  --sidebar-foreground: hsl(210, 25%, 8%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(212, 51%, 93%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(205, 25%, 91%);\n  --sidebar-ring: hsl(203, 89%, 53%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom Gaming Theme Styles */\n.gradient-primary {\n  background: linear-gradient(135deg, hsl(217, 91%, 60%) 0%, hsl(261, 91%, 60%) 100%);\n}\n\n.glow {\n  box-shadow: 0 0 20px hsl(217, 91%, 60% / 0.3);\n}\n\n.card-hover {\n  transition: all 0.2s ease-in-out;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px hsl(0, 0%, 0% / 0.3);\n}\n\n.game-card {\n  background: linear-gradient(145deg, var(--card), hsl(222, 84%, 10%));\n  border: 1px solid var(--border);\n}\n\n.level-badge {\n  background: linear-gradient(135deg, hsl(142, 76%, 36%) 0%, hsl(142, 76%, 26%) 100%);\n}\n\n.navbar-blur {\n  backdrop-filter: blur(10px);\n  background: hsl(222, 84%, 5% / 0.8);\n}\n\n/* Gaming specific animations */\n@keyframes pulse-glow {\n  0%, 100% {\n    box-shadow: 0 0 20px hsl(217, 91%, 60% / 0.3);\n  }\n  50% {\n    box-shadow: 0 0 30px hsl(217, 91%, 60% / 0.5);\n  }\n}\n\n.pulse-glow {\n  animation: pulse-glow 2s ease-in-out infinite;\n}\n\n/* Scrollbar Styling */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--primary);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(217, 91%, 50%);\n}\n\n/* Line clamp utility */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n","size_bytes":5101},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AccountCard.tsx":{"content":"import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { GameAccount } from '@shared/schema';\n\ninterface AccountCardProps {\n  account: GameAccount & {\n    seller: {\n      username: string;\n      level: number;\n      rating: number;\n    };\n  };\n  onClick: (accountId: string) => void;\n}\n\nconst AccountCard: React.FC<AccountCardProps> = ({ account, onClick }) => {\n  const getGameBadgeColor = (game: string) => {\n    switch (game) {\n      case 'fifa': return 'bg-green-500/20 text-green-400';\n      case 'valorant': return 'bg-red-500/20 text-red-400';\n      case 'lol': return 'bg-blue-500/20 text-blue-400';\n      case 'pubg': return 'bg-yellow-500/20 text-yellow-400';\n      case 'cod': return 'bg-orange-500/20 text-orange-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getLevelBadgeColor = (level: number) => {\n    if (level >= 4) return 'bg-gradient-to-r from-purple-500 to-pink-500';\n    if (level >= 3) return 'bg-gradient-to-r from-green-500 to-blue-500';\n    if (level >= 2) return 'bg-gradient-to-r from-blue-500 to-cyan-500';\n    return 'bg-gradient-to-r from-gray-500 to-gray-600';\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    for (let i = 1; i <= 5; i++) {\n      stars.push(\n        <i \n          key={i} \n          className={`${i <= Math.floor(rating) ? 'fas fa-star' : 'far fa-star'} text-yellow-400 text-xs`}\n        />\n      );\n    }\n    return stars;\n  };\n\n  return (\n    <Card \n      className=\"card-hover cursor-pointer overflow-hidden\"\n      onClick={() => onClick(account.id)}\n      data-testid={`account-card-${account.id}`}\n    >\n      {account.images.length > 0 && (\n        <img \n          src={account.images[0]} \n          alt={account.title}\n          className=\"w-full h-48 object-cover\"\n        />\n      )}\n      \n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Badge className={`text-xs font-medium ${getGameBadgeColor(account.game)}`}>\n              {account.game.toUpperCase()}\n            </Badge>\n          </div>\n          <span className=\"text-lg font-bold text-primary\" data-testid={`price-${account.id}`}>\n            ${account.price}\n          </span>\n        </div>\n        \n        <h3 className=\"font-semibold mb-2 line-clamp-2\" data-testid={`title-${account.id}`}>\n          {account.title}\n        </h3>\n        \n        <div className=\"grid grid-cols-2 gap-2 text-sm mb-4\">\n          {Object.entries(account.gameSpecificData).slice(0, 4).map(([key, value]) => (\n            <div key={key} className=\"flex justify-between\">\n              <span className=\"text-muted-foreground capitalize\">{key}:</span>\n              <span>{String(value)}</span>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-xs text-primary-foreground\">\n                {account.seller.username[0].toUpperCase()}\n              </span>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium\" data-testid={`seller-${account.id}`}>\n                {account.seller.username}\n              </p>\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"flex\">\n                  {renderStars(account.seller.rating)}\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  ({account.seller.rating.toFixed(1)})\n                </span>\n              </div>\n            </div>\n          </div>\n          <Badge className={`text-xs font-bold px-2 py-1 rounded text-white ${getLevelBadgeColor(account.seller.level)}`}>\n            LV {account.seller.level}\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AccountCard;\n","size_bytes":4132},"client/src/components/ChatInterface.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '../contexts/AuthContext';\nimport { ChatMessage } from '@shared/schema';\n\ninterface ChatInterfaceProps {\n  orderId: string;\n  participant: {\n    id: string;\n    username: string;\n    isOnline: boolean;\n  };\n  messages: ChatMessage[];\n  onSendMessage: (content: string) => Promise<void>;\n  onClose: () => void;\n}\n\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({\n  orderId,\n  participant,\n  messages,\n  onSendMessage,\n  onClose\n}) => {\n  const { userProfile } = useAuth();\n  const [messageContent, setMessageContent] = useState('');\n  const [sending, setSending] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!messageContent.trim() || sending) return;\n\n    setSending(true);\n    try {\n      await onSendMessage(messageContent.trim());\n      setMessageContent('');\n    } catch (error) {\n      console.error('Failed to send message:', error);\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage(e);\n    }\n  };\n\n  return (\n    <Card className=\"h-[600px] flex flex-col\">\n      <CardHeader className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-semibold text-primary-foreground\">\n                {participant.username[0].toUpperCase()}\n              </span>\n            </div>\n            <div>\n              <h3 className=\"font-semibold\" data-testid=\"chat-participant-name\">\n                {participant.username}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Order #{orderId} â€¢ FIFA 24 Account\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge \n              variant={participant.isOnline ? 'default' : 'secondary'}\n              className={participant.isOnline ? 'bg-green-500/20 text-green-400' : ''}\n            >\n              {participant.isOnline ? 'Online' : 'Offline'}\n            </Badge>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"close-chat-button\"\n            >\n              <i className=\"fas fa-times\"></i>\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 overflow-y-auto p-6 space-y-4\" data-testid=\"chat-messages\">\n        {messages.map((message) => {\n          const isOwnMessage = message.senderId === userProfile?.id;\n          \n          return (\n            <div \n              key={message.id} \n              className={`flex items-start space-x-3 ${isOwnMessage ? 'flex-row-reverse space-x-reverse' : ''}`}\n              data-testid={`message-${message.id}`}\n            >\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-xs text-primary-foreground\">\n                  {isOwnMessage ? userProfile?.username[0].toUpperCase() : participant.username[0].toUpperCase()}\n                </span>\n              </div>\n              <div className=\"flex-1\">\n                <div className={`flex items-center space-x-2 mb-1 ${isOwnMessage ? 'justify-end' : ''}`}>\n                  {!isOwnMessage && (\n                    <span className=\"text-xs text-muted-foreground\">\n                      {new Date(message.timestamp).toLocaleTimeString()}\n                    </span>\n                  )}\n                  <span className=\"text-sm font-semibold\">\n                    {isOwnMessage ? userProfile?.username : participant.username}\n                  </span>\n                  {isOwnMessage && (\n                    <span className=\"text-xs text-muted-foreground\">\n                      {new Date(message.timestamp).toLocaleTimeString()}\n                    </span>\n                  )}\n                </div>\n                <div className={`rounded-lg p-3 max-w-xs ${\n                  isOwnMessage \n                    ? 'bg-primary text-primary-foreground ml-auto' \n                    : 'bg-muted'\n                }`}>\n                  <p className=\"text-sm\">{message.content}</p>\n                </div>\n                {message.isFiltered && (\n                  <div className=\"mt-2 flex justify-center\">\n                    <Badge variant=\"destructive\" className=\"text-xs\">\n                      <i className=\"fas fa-shield-alt mr-1\"></i>\n                      Message flagged: {message.filteredReason}\n                    </Badge>\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n        <div ref={messagesEndRef} />\n      </CardContent>\n\n      <div className=\"p-6 border-t border-border\">\n        <form onSubmit={handleSendMessage} className=\"flex space-x-4\">\n          <Input\n            type=\"text\"\n            placeholder=\"Type your message...\"\n            value={messageContent}\n            onChange={(e) => setMessageContent(e.target.value)}\n            onKeyPress={handleKeyPress}\n            maxLength={500}\n            className=\"flex-1\"\n            data-testid=\"message-input\"\n          />\n          <Button \n            type=\"submit\" \n            disabled={!messageContent.trim() || sending}\n            className=\"gradient-primary\"\n            data-testid=\"send-message-button\"\n          >\n            {sending ? (\n              <i className=\"fas fa-spinner fa-spin\"></i>\n            ) : (\n              <i className=\"fas fa-paper-plane\"></i>\n            )}\n          </Button>\n        </form>\n        <div className=\"flex items-center justify-between mt-2\">\n          <p className=\"text-xs text-muted-foreground\">\n            Messages are filtered for contact info sharing â€¢ Max 500 characters\n          </p>\n          <div className=\"flex space-x-2\">\n            <button \n              type=\"button\"\n              className=\"text-xs text-muted-foreground hover:text-foreground transition-colors\"\n              onClick={() => {/* TODO: Implement report user */}}\n              data-testid=\"report-user-button\"\n            >\n              <i className=\"fas fa-flag mr-1\"></i>\n              Report\n            </button>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default ChatInterface;\n","size_bytes":7082},"client/src/components/GameCard.tsx":{"content":"import React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\n\ninterface GameCardProps {\n  game: {\n    id: string;\n    name: string;\n    image: string;\n    accountCount: number;\n  };\n  onClick: (gameId: string) => void;\n}\n\nconst GameCard: React.FC<GameCardProps> = ({ game, onClick }) => {\n  return (\n    <Card \n      className=\"game-card card-hover cursor-pointer\" \n      onClick={() => onClick(game.id)}\n      data-testid={`game-card-${game.id}`}\n    >\n      <CardContent className=\"p-6 text-center\">\n        <img \n          src={game.image} \n          alt={`${game.name} Game`} \n          className=\"w-full h-32 object-cover rounded-lg mb-4\"\n        />\n        <h3 className=\"font-bold text-lg mb-2\">{game.name}</h3>\n        <p className=\"text-sm text-muted-foreground\" data-testid={`account-count-${game.id}`}>\n          {game.accountCount.toLocaleString()} accounts\n        </p>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default GameCard;\n","size_bytes":974},"client/src/components/Layout.tsx":{"content":"import React from 'react';\nimport Navigation from './Navigation';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Navigation />\n      <main>\n        {children}\n      </main>\n      <footer className=\"py-12 px-4 sm:px-6 lg:px-8 border-t border-border\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-4 gap-8 mb-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <i className=\"fas fa-gamepad text-primary text-2xl\"></i>\n                <span className=\"text-xl font-bold text-foreground\">GameVault</span>\n              </div>\n              <p className=\"text-muted-foreground mb-4\">The trusted marketplace for buying and selling premium gaming accounts securely.</p>\n              <div className=\"flex space-x-3\">\n                <a href=\"#\" className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center hover:bg-primary/30 transition-colors\">\n                  <i className=\"fab fa-twitter text-primary\"></i>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center hover:bg-primary/30 transition-colors\">\n                  <i className=\"fab fa-discord text-primary\"></i>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center hover:bg-primary/30 transition-colors\">\n                  <i className=\"fab fa-reddit text-primary\"></i>\n                </a>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Games</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">FIFA 24</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Valorant</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">League of Legends</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">PUBG</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Call of Duty</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Safety Guidelines</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Contact Us</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Report Issue</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Community</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Legal</h4>\n              <ul className=\"space-y-2\">\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Terms of Service</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Cookie Policy</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Acceptable Use</a></li>\n                <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">DMCA</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"pt-8 border-t border-border flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-muted-foreground\">&copy; 2024 GameVault. All rights reserved.</p>\n            <div className=\"flex items-center space-x-6 mt-4 md:mt-0\">\n              <div className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-shield-check text-green-400\"></i>\n                <span className=\"text-sm text-muted-foreground\">Secure Transactions</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-clock text-primary\"></i>\n                <span className=\"text-sm text-muted-foreground\">24/7 Support</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n","size_bytes":4954},"client/src/components/Navigation.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\nconst Navigation: React.FC = () => {\n  const [location] = useLocation();\n  const { currentUser, userProfile, logout } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  const getLevelColor = (level: number) => {\n    if (level >= 4) return 'bg-gradient-to-r from-purple-500 to-pink-500';\n    if (level >= 3) return 'bg-gradient-to-r from-green-500 to-blue-500';\n    if (level >= 2) return 'bg-gradient-to-r from-blue-500 to-cyan-500';\n    return 'bg-gradient-to-r from-gray-500 to-gray-600';\n  };\n\n  return (\n    <nav className=\"navbar-blur border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-gamepad text-primary text-2xl\"></i>\n              <span className=\"text-xl font-bold text-foreground\">GameVault</span>\n            </Link>\n            <div className=\"hidden md:flex space-x-6\">\n              <Link href=\"/marketplace\" className={`text-muted-foreground hover:text-primary transition-colors ${location === '/marketplace' ? 'text-primary' : ''}`}>\n                Marketplace\n              </Link>\n              {currentUser && (\n                <>\n                  <Link href=\"/wallet\" className={`text-muted-foreground hover:text-primary transition-colors ${location === '/wallet' ? 'text-primary' : ''}`}>\n                    Wallet\n                  </Link>\n                  <Link href=\"/dashboard\" className={`text-muted-foreground hover:text-primary transition-colors ${location === '/dashboard' ? 'text-primary' : ''}`}>\n                    Orders\n                  </Link>\n                  <Link href=\"/support\" className={`text-muted-foreground hover:text-primary transition-colors ${location === '/support' ? 'text-primary' : ''}`}>\n                    Support\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {currentUser && userProfile ? (\n              <>\n                <div className=\"hidden md:flex items-center space-x-3 bg-card border border-border rounded-lg px-3 py-2\">\n                  <i className=\"fas fa-wallet text-primary\"></i>\n                  <span className=\"text-sm font-medium\" data-testid=\"wallet-balance\">\n                    ${userProfile.walletBalance.toFixed(2)}\n                  </span>\n                </div>\n                \n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2 bg-card border border-border rounded-lg px-3 py-2\" data-testid=\"user-menu\">\n                      <Badge className={`text-xs font-bold px-2 py-1 rounded text-white ${getLevelColor(userProfile.level)}`}>\n                        LV {userProfile.level}\n                      </Badge>\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                        <span className=\"text-xs font-bold text-primary-foreground\">\n                          {userProfile.username[0].toUpperCase()}\n                        </span>\n                      </div>\n                      <span className=\"hidden sm:block text-sm font-medium\">\n                        {userProfile.username}\n                      </span>\n                      <i className=\"fas fa-chevron-down text-xs text-muted-foreground\"></i>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/dashboard\" className=\"cursor-pointer\">\n                        <i className=\"fas fa-tachometer-alt mr-2\"></i>\n                        Dashboard\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/wallet\" className=\"cursor-pointer\">\n                        <i className=\"fas fa-wallet mr-2\"></i>\n                        Wallet\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/sell\" className=\"cursor-pointer\">\n                        <i className=\"fas fa-plus mr-2\"></i>\n                        Sell Account\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    {userProfile.role === 'admin' && (\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/admin\" className=\"cursor-pointer\">\n                          <i className=\"fas fa-shield-alt mr-2\"></i>\n                          Admin Dashboard\n                        </Link>\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuItem \n                      onClick={handleLogout}\n                      className=\"cursor-pointer text-destructive focus:text-destructive\"\n                      data-testid=\"logout-button\"\n                    >\n                      <i className=\"fas fa-sign-out-alt mr-2\"></i>\n                      Logout\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" data-testid=\"login-button\">Login</Button>\n                </Link>\n                <Link href=\"/login\">\n                  <Button className=\"gradient-primary\" data-testid=\"signup-button\">Sign Up</Button>\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","size_bytes":6575},"client/src/components/ProtectedRoute.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '../contexts/AuthContext';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  adminOnly?: boolean;\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children, adminOnly = false }) => {\n  const { currentUser, userProfile, loading } = useAuth();\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    if (!loading) {\n      if (!currentUser) {\n        navigate('/login');\n      } else if (adminOnly && userProfile?.role !== 'admin') {\n        navigate('/');\n      }\n    }\n  }, [currentUser, userProfile, loading, adminOnly, navigate]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!currentUser || (adminOnly && userProfile?.role !== 'admin')) {\n    return null;\n  }\n\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\n","size_bytes":1041},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { User as FirebaseUser } from 'firebase/auth';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { auth } from '../lib/firebase';\nimport { getUserProfile } from '../lib/auth';\nimport { User as AppUser } from '@shared/schema';\n\ninterface AuthContextType {\n  currentUser: FirebaseUser | null;\n  userProfile: AppUser | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, username: string) => Promise<void>;\n  loginWithGoogle: () => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState<FirebaseUser | null>(null);\n  const [userProfile, setUserProfile] = useState<AppUser | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      setCurrentUser(user);\n      \n      if (user) {\n        const profile = await getUserProfile(user.uid);\n        setUserProfile(profile);\n      } else {\n        setUserProfile(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    const { loginWithEmail } = await import('../lib/auth');\n    await loginWithEmail(email, password);\n  };\n\n  const register = async (email: string, password: string, username: string) => {\n    const { registerWithEmail } = await import('../lib/auth');\n    await registerWithEmail(email, password, username);\n  };\n\n  const loginWithGoogle = async () => {\n    const { loginWithGoogle: googleLogin } = await import('../lib/auth');\n    await googleLogin();\n  };\n\n  const logout = async () => {\n    const { logout: authLogout } = await import('../lib/auth');\n    await authLogout();\n  };\n\n  const value: AuthContextType = {\n    currentUser,\n    userProfile,\n    loading,\n    login,\n    register,\n    loginWithGoogle,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","size_bytes":2471},"client/src/contexts/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>('dark');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    document.documentElement.classList.toggle('dark', theme === 'dark');\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  const value: ThemeContextType = {\n    theme,\n    toggleTheme\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n","size_bytes":1190},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useAuth as useAuthContext } from '../contexts/AuthContext';\n\nexport const useAuth = useAuthContext;\n","size_bytes":109},"client/src/hooks/useChat.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { ref, push, onValue, query, orderByChild, equalTo, get } from 'firebase/database';\nimport { database } from '../lib/firebase';\nimport { ChatMessage, InsertChatMessage } from '@shared/schema';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport function useChat(orderId: string) {\n  const { currentUser } = useAuth();\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    if (!orderId) {\n      setLoading(false);\n      return;\n    }\n\n    const messagesRef = ref(database, 'chatMessages');\n    const messagesQuery = query(messagesRef, orderByChild('orderId'), equalTo(orderId));\n\n    const unsubscribe = onValue(\n      messagesQuery,\n      (snapshot) => {\n        try {\n          const messagesData: ChatMessage[] = [];\n          \n          if (snapshot.exists()) {\n            snapshot.forEach((childSnapshot) => {\n              const messageData = childSnapshot.val();\n              messagesData.push({\n                id: childSnapshot.key!,\n                ...messageData,\n                timestamp: new Date(messageData.timestamp)\n              });\n            });\n          }\n\n          // Sort messages by timestamp\n          messagesData.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n          \n          setMessages(messagesData);\n          setError(null);\n        } catch (err) {\n          setError(err as Error);\n        } finally {\n          setLoading(false);\n        }\n      },\n      (err) => {\n        setError(err as Error);\n        setLoading(false);\n      }\n    );\n\n    return () => unsubscribe();\n  }, [orderId]);\n\n  const sendMessage = useCallback(async (content: string) => {\n    if (!currentUser || !orderId || !content.trim()) {\n      throw new Error('Missing required data for sending message');\n    }\n\n    // Content filtering for contact information\n    const contactInfoPattern = /@|\\.com|phone|discord|skype|telegram|whatsapp|email|gmail|yahoo|hotmail|\\+\\d|call|text|contact/i;\n    const isFiltered = contactInfoPattern.test(content);\n\n    const messageData: InsertChatMessage = {\n      orderId,\n      senderId: currentUser.uid,\n      content: content.trim(),\n      isFiltered,\n      filteredReason: isFiltered ? 'Contact information detected' : undefined\n    };\n\n    const messagesRef = ref(database, 'chatMessages');\n    await push(messagesRef, {\n      ...messageData,\n      timestamp: new Date().toISOString()\n    });\n\n    if (isFiltered) {\n      throw new Error('Message contains contact information and has been flagged for review.');\n    }\n  }, [currentUser, orderId]);\n\n  return {\n    messages,\n    loading,\n    error,\n    sendMessage\n  };\n}\n\nexport function useChatParticipants(orderId: string) {\n  const [participants, setParticipants] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchParticipants = async () => {\n      if (!orderId) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Fetch order to get buyer and seller IDs\n        const orderRef = ref(database, `orders/${orderId}`);\n        const orderSnapshot = await get(orderRef);\n        \n        if (!orderSnapshot.exists()) {\n          setLoading(false);\n          return;\n        }\n\n        const orderData = orderSnapshot.val();\n        const participantIds = [orderData.buyerId, orderData.sellerId];\n\n        // Fetch participant details\n        const participantPromises = participantIds.map(async (id) => {\n          const userRef = ref(database, `users/${id}`);\n          const userSnapshot = await get(userRef);\n          \n          if (userSnapshot.exists()) {\n            return {\n              id,\n              ...userSnapshot.val()\n            };\n          }\n          return null;\n        });\n\n        const participantData = await Promise.all(participantPromises);\n        setParticipants(participantData.filter(Boolean));\n      } catch (error) {\n        console.error('Error fetching chat participants:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchParticipants();\n  }, [orderId]);\n\n  return { participants, loading };\n}\n","size_bytes":4278},"client/src/hooks/useFirestore.ts":{"content":"import { useState, useEffect } from 'react';\nimport { ref, onValue, off, get, set, update, push, remove } from 'firebase/database';\nimport { database } from '../lib/firebase';\n\nexport interface FirestoreHookOptions {\n  listen?: boolean;\n}\n\nexport function useFirestoreDocument<T>(path: string, options: FirestoreHookOptions = {}) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    if (!path) {\n      setLoading(false);\n      return;\n    }\n\n    const dbRef = ref(database, path);\n\n    if (options.listen) {\n      const unsubscribe = onValue(\n        dbRef,\n        (snapshot) => {\n          try {\n            if (snapshot.exists()) {\n              const value = snapshot.val();\n              setData(value);\n            } else {\n              setData(null);\n            }\n            setError(null);\n          } catch (err) {\n            setError(err as Error);\n          } finally {\n            setLoading(false);\n          }\n        },\n        (err) => {\n          setError(err as Error);\n          setLoading(false);\n        }\n      );\n\n      return () => unsubscribe();\n    } else {\n      get(dbRef)\n        .then((snapshot) => {\n          if (snapshot.exists()) {\n            setData(snapshot.val());\n          } else {\n            setData(null);\n          }\n          setError(null);\n        })\n        .catch((err) => {\n          setError(err as Error);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [path, options.listen]);\n\n  return { data, loading, error };\n}\n\nexport function useFirestoreCollection<T>(path: string, options: FirestoreHookOptions = {}) {\n  const [data, setData] = useState<Record<string, T>>({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    if (!path) {\n      setLoading(false);\n      return;\n    }\n\n    const dbRef = ref(database, path);\n\n    if (options.listen) {\n      const unsubscribe = onValue(\n        dbRef,\n        (snapshot) => {\n          try {\n            if (snapshot.exists()) {\n              const value = snapshot.val();\n              setData(value || {});\n            } else {\n              setData({});\n            }\n            setError(null);\n          } catch (err) {\n            setError(err as Error);\n          } finally {\n            setLoading(false);\n          }\n        },\n        (err) => {\n          setError(err as Error);\n          setLoading(false);\n        }\n      );\n\n      return () => unsubscribe();\n    } else {\n      get(dbRef)\n        .then((snapshot) => {\n          if (snapshot.exists()) {\n            setData(snapshot.val() || {});\n          } else {\n            setData({});\n          }\n          setError(null);\n        })\n        .catch((err) => {\n          setError(err as Error);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [path, options.listen]);\n\n  // Convert to array format\n  const dataArray = Object.entries(data).map(([id, value]) => ({\n    id,\n    ...value\n  })) as (T & { id: string })[];\n\n  return { data: dataArray, dataObject: data, loading, error };\n}\n\nexport const useFirestoreActions = () => {\n  const createDocument = async (path: string, data: any) => {\n    const dbRef = ref(database, path);\n    return set(dbRef, data);\n  };\n\n  const updateDocument = async (path: string, data: any) => {\n    const dbRef = ref(database, path);\n    return update(dbRef, data);\n  };\n\n  const deleteDocument = async (path: string) => {\n    const dbRef = ref(database, path);\n    return remove(dbRef);\n  };\n\n  const pushDocument = async (path: string, data: any) => {\n    const dbRef = ref(database, path);\n    return push(dbRef, data);\n  };\n\n  return {\n    createDocument,\n    updateDocument,\n    deleteDocument,\n    pushDocument\n  };\n};\n","size_bytes":3918},"client/src/lib/auth.ts":{"content":"import { \n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signInWithRedirect,\n  getRedirectResult,\n  GoogleAuthProvider,\n  signOut,\n  User\n} from \"firebase/auth\";\nimport { ref, set, get } from \"firebase/database\";\nimport { auth, database } from \"./firebase\";\nimport { User as AppUser, InsertUser } from \"@shared/schema\";\n\nexport { User as FirebaseUser } from \"firebase/auth\";\n\nconst googleProvider = new GoogleAuthProvider();\n\nexport const loginWithEmail = async (email: string, password: string) => {\n  try {\n    const result = await signInWithEmailAndPassword(auth, email, password);\n    return result.user;\n  } catch (error: any) {\n    throw new Error(error.message);\n  }\n};\n\nexport const registerWithEmail = async (email: string, password: string, username: string) => {\n  try {\n    // Check if username is available\n    const usernameRef = ref(database, `usernames/${username}`);\n    const usernameSnapshot = await get(usernameRef);\n    \n    if (usernameSnapshot.exists()) {\n      throw new Error(\"Username is already taken\");\n    }\n\n    const result = await createUserWithEmailAndPassword(auth, email, password);\n    \n    // Create user profile\n    const userData: InsertUser = {\n      email,\n      username,\n      displayName: username,\n      role: \"user\",\n      level: 1,\n      totalTrades: 0,\n      walletBalance: 0,\n      rating: 0,\n      reviewCount: 0,\n      badges: [],\n      joinDate: new Date(),\n      isVerified: false,\n      isBanned: false\n    };\n\n    // Save user data\n    await set(ref(database, `users/${result.user.uid}`), userData);\n    \n    // Reserve username\n    await set(ref(database, `usernames/${username}`), result.user.uid);\n\n    return result.user;\n  } catch (error: any) {\n    throw new Error(error.message);\n  }\n};\n\nexport const loginWithGoogle = async () => {\n  await signInWithRedirect(auth, googleProvider);\n};\n\nexport const handleRedirectResult = async () => {\n  try {\n    const result = await getRedirectResult(auth);\n    if (result?.user) {\n      // Check if user profile exists, create if not\n      const userRef = ref(database, `users/${result.user.uid}`);\n      const userSnapshot = await get(userRef);\n      \n      if (!userSnapshot.exists()) {\n        const username = result.user.email?.split('@')[0] || `user_${Date.now()}`;\n        \n        const userData: InsertUser = {\n          email: result.user.email!,\n          username,\n          displayName: result.user.displayName || username,\n          photoURL: result.user.photoURL || undefined,\n          role: \"user\",\n          level: 1,\n          totalTrades: 0,\n          walletBalance: 0,\n          rating: 0,\n          reviewCount: 0,\n          badges: [],\n          joinDate: new Date(),\n          isVerified: true, // Google accounts are pre-verified\n          isBanned: false\n        };\n\n        await set(userRef, userData);\n        await set(ref(database, `usernames/${username}`), result.user.uid);\n      }\n      \n      return result.user;\n    }\n    return null;\n  } catch (error: any) {\n    throw new Error(error.message);\n  }\n};\n\nexport const logout = async () => {\n  try {\n    await signOut(auth);\n  } catch (error: any) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getUserProfile = async (uid: string): Promise<AppUser | null> => {\n  try {\n    const userRef = ref(database, `users/${uid}`);\n    const snapshot = await get(userRef);\n    \n    if (snapshot.exists()) {\n      const data = snapshot.val();\n      return {\n        id: uid,\n        ...data,\n        joinDate: new Date(data.joinDate),\n        lastActive: data.lastActive ? new Date(data.lastActive) : undefined\n      };\n    }\n    \n    return null;\n  } catch (error: any) {\n    console.error(\"Error fetching user profile:\", error);\n    return null;\n  }\n};\n\nexport const updateUserLevel = async (uid: string, totalTrades: number) => {\n  let level = 1;\n  \n  // Level calculation: Level 2 = 500 trades, Level 3 = 1000, Level 4 = 1500, etc.\n  if (totalTrades >= 500) {\n    level = Math.floor((totalTrades - 500) / 500) + 2;\n  }\n  \n  const userRef = ref(database, `users/${uid}`);\n  await set(ref(database, `users/${uid}/level`), level);\n  await set(ref(database, `users/${uid}/totalTrades`), totalTrades);\n};\n","size_bytes":4207},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getDatabase } from \"firebase/database\";\nimport { getStorage } from \"firebase/storage\";\nimport { getFunctions } from \"firebase/functions\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  databaseURL: `https://${import.meta.env.VITE_FIREBASE_PROJECT_ID}-default-rtdb.firebaseio.com/`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const auth = getAuth(app);\nexport const database = getDatabase(app);\nexport const storage = getStorage(app);\nexport const functions = getFunctions(app);\n\nexport default app;\n","size_bytes":955},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AccountDetails.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useRoute } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { ref, get, update } from 'firebase/database';\nimport { database } from '../lib/firebase';\nimport { GameAccount, User, Order } from '@shared/schema';\n\nconst AccountDetails: React.FC = () => {\n  const [, params] = useRoute('/account/:id');\n  const { currentUser, userProfile } = useAuth();\n  const { toast } = useToast();\n  const [account, setAccount] = useState<GameAccount | null>(null);\n  const [seller, setSeller] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [purchasing, setPurchasing] = useState(false);\n\n  useEffect(() => {\n    const fetchAccountDetails = async () => {\n      if (!params?.id) return;\n\n      try {\n        // Fetch account details\n        const accountRef = ref(database, `gameAccounts/${params.id}`);\n        const accountSnapshot = await get(accountRef);\n\n        if (accountSnapshot.exists()) {\n          const accountData = accountSnapshot.val();\n          const accountWithId: GameAccount = {\n            id: params.id,\n            ...accountData,\n            createdAt: new Date(accountData.createdAt),\n            updatedAt: new Date(accountData.updatedAt),\n            featuredUntil: accountData.featuredUntil ? new Date(accountData.featuredUntil) : undefined\n          };\n          setAccount(accountWithId);\n\n          // Fetch seller details\n          const sellerRef = ref(database, `users/${accountData.sellerId}`);\n          const sellerSnapshot = await get(sellerRef);\n          \n          if (sellerSnapshot.exists()) {\n            const sellerData = sellerSnapshot.val();\n            setSeller({\n              id: accountData.sellerId,\n              ...sellerData,\n              joinDate: new Date(sellerData.joinDate),\n              lastActive: sellerData.lastActive ? new Date(sellerData.lastActive) : undefined\n            });\n          }\n\n          // Increment view count\n          await update(ref(database, `gameAccounts/${params.id}`), {\n            views: (accountData.views || 0) + 1\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching account details:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load account details.\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAccountDetails();\n  }, [params?.id, toast]);\n\n  const handlePurchase = async () => {\n    if (!account || !seller || !userProfile || !currentUser) return;\n\n    if (userProfile.walletBalance < account.price) {\n      toast({\n        title: \"Insufficient Balance\",\n        description: \"Please top up your wallet to complete this purchase.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (account.sellerId === currentUser.uid) {\n      toast({\n        title: \"Error\",\n        description: \"You cannot purchase your own account.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setPurchasing(true);\n\n    try {\n      const orderId = `GV-${Date.now()}`;\n      const orderData: Omit<Order, 'id'> = {\n        buyerId: currentUser.uid,\n        sellerId: account.sellerId,\n        accountId: account.id,\n        amount: account.price,\n        status: 'escrow',\n        escrowAmount: account.price,\n        createdAt: new Date(),\n        notes: `Purchase of ${account.title}`\n      };\n\n      // Create order\n      await update(ref(database, `orders/${orderId}`), orderData);\n\n      // Update account status\n      await update(ref(database, `gameAccounts/${account.id}`), {\n        status: 'pending'\n      });\n\n      // Deduct from buyer's wallet (funds go to escrow)\n      await update(ref(database, `users/${currentUser.uid}`), {\n        walletBalance: userProfile.walletBalance - account.price\n      });\n\n      // Create wallet transaction record\n      const transactionId = `TXN-${Date.now()}`;\n      await update(ref(database, `walletTransactions/${transactionId}`), {\n        userId: currentUser.uid,\n        type: 'purchase',\n        amount: -account.price,\n        description: `Purchase: ${account.title}`,\n        status: 'completed',\n        createdAt: new Date().toISOString(),\n        completedAt: new Date().toISOString()\n      });\n\n      // Create escrow record\n      await update(ref(database, `escrow/${orderId}`), {\n        amount: account.price,\n        buyerId: currentUser.uid,\n        sellerId: account.sellerId,\n        status: 'held',\n        createdAt: new Date().toISOString()\n      });\n\n      toast({\n        title: \"Purchase Successful!\",\n        description: \"Your order has been placed. The seller will be notified.\",\n      });\n\n      // Redirect to dashboard\n      window.location.href = '/dashboard';\n    } catch (error) {\n      console.error('Error processing purchase:', error);\n      toast({\n        title: \"Purchase Failed\",\n        description: \"There was an error processing your purchase. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setPurchasing(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!account || !seller) {\n    return (\n      <div className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <Alert variant=\"destructive\">\n            <AlertDescription>\n              Account not found or no longer available.\n            </AlertDescription>\n          </Alert>\n        </div>\n      </div>\n    );\n  }\n\n  const getGameBadgeColor = (game: string) => {\n    switch (game) {\n      case 'fifa': return 'bg-green-500/20 text-green-400';\n      case 'valorant': return 'bg-red-500/20 text-red-400';\n      case 'lol': return 'bg-blue-500/20 text-blue-400';\n      case 'pubg': return 'bg-yellow-500/20 text-yellow-400';\n      case 'cod': return 'bg-orange-500/20 text-orange-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getLevelBadgeColor = (level: number) => {\n    if (level >= 4) return 'bg-gradient-to-r from-purple-500 to-pink-500';\n    if (level >= 3) return 'bg-gradient-to-r from-green-500 to-blue-500';\n    if (level >= 2) return 'bg-gradient-to-r from-blue-500 to-cyan-500';\n    return 'bg-gradient-to-r from-gray-500 to-gray-600';\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    for (let i = 1; i <= 5; i++) {\n      stars.push(\n        <i \n          key={i} \n          className={`${i <= Math.floor(rating) ? 'fas fa-star' : 'far fa-star'} text-yellow-400`}\n        />\n      );\n    }\n    return stars;\n  };\n\n  return (\n    <div className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Account Images */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            {account.images.length > 0 ? (\n              <div className=\"space-y-4\">\n                <img\n                  src={account.images[0]}\n                  alt={account.title}\n                  className=\"w-full h-96 object-cover rounded-lg\"\n                  data-testid=\"account-main-image\"\n                />\n                {account.images.length > 1 && (\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    {account.images.slice(1, 4).map((image, index) => (\n                      <img\n                        key={index}\n                        src={image}\n                        alt={`${account.title} screenshot ${index + 2}`}\n                        className=\"w-full h-24 object-cover rounded-lg\"\n                      />\n                    ))}\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"w-full h-96 bg-muted rounded-lg flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-image text-4xl text-muted-foreground mb-4\"></i>\n                  <p className=\"text-muted-foreground\">No images available</p>\n                </div>\n              </div>\n            )}\n\n            {/* Account Description */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Description</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"account-description\">\n                  {account.description}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Game-Specific Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Account Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-6\" data-testid=\"game-specific-details\">\n                  {Object.entries(account.gameSpecificData).map(([key, value]) => (\n                    <div key={key} className=\"flex justify-between items-center py-2 border-b border-border\">\n                      <span className=\"text-muted-foreground capitalize font-medium\">\n                        {key.replace(/([A-Z])/g, ' $1').trim()}:\n                      </span>\n                      <span className=\"font-semibold\">{String(value)}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Purchase Panel */}\n          <div className=\"space-y-6\">\n            {/* Account Info */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <Badge className={`text-sm font-medium ${getGameBadgeColor(account.game)}`}>\n                    {account.game.toUpperCase()}\n                  </Badge>\n                  {account.status === 'pending' && (\n                    <Badge variant=\"secondary\">Reserved</Badge>\n                  )}\n                </div>\n\n                <h1 className=\"text-2xl font-bold mb-2\" data-testid=\"account-title\">\n                  {account.title}\n                </h1>\n\n                <div className=\"flex items-baseline space-x-2 mb-6\">\n                  <span className=\"text-3xl font-bold text-primary\" data-testid=\"account-price\">\n                    ${account.price}\n                  </span>\n                </div>\n\n                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground mb-6\">\n                  <i className=\"fas fa-eye\"></i>\n                  <span>{account.views} views</span>\n                  <span>â€¢</span>\n                  <span>Listed {account.createdAt.toLocaleDateString()}</span>\n                </div>\n\n                {currentUser ? (\n                  account.status === 'active' ? (\n                    <Button\n                      className=\"w-full gradient-primary text-lg py-3\"\n                      onClick={handlePurchase}\n                      disabled={purchasing || account.sellerId === currentUser.uid}\n                      data-testid=\"purchase-button\"\n                    >\n                      {purchasing ? (\n                        <>\n                          <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                          Processing...\n                        </>\n                      ) : account.sellerId === currentUser.uid ? (\n                        <>\n                          <i className=\"fas fa-user mr-2\"></i>\n                          Your Account\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fas fa-shopping-cart mr-2\"></i>\n                          Buy Now\n                        </>\n                      )}\n                    </Button>\n                  ) : (\n                    <Button\n                      className=\"w-full\"\n                      disabled\n                      variant=\"secondary\"\n                    >\n                      <i className=\"fas fa-lock mr-2\"></i>\n                      No Longer Available\n                    </Button>\n                  )\n                ) : (\n                  <Button\n                    className=\"w-full gradient-primary text-lg py-3\"\n                    onClick={() => window.location.href = '/login'}\n                    data-testid=\"login-to-buy-button\"\n                  >\n                    <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                    Login to Purchase\n                  </Button>\n                )}\n\n                {currentUser && userProfile && userProfile.walletBalance < account.price && (\n                  <Alert className=\"mt-4\" variant=\"destructive\">\n                    <AlertDescription>\n                      Insufficient wallet balance. You need ${(account.price - userProfile.walletBalance).toFixed(2)} more.\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Seller Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Seller Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                    <span className=\"text-lg font-bold text-primary-foreground\">\n                      {seller.username[0].toUpperCase()}\n                    </span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <h3 className=\"font-semibold\" data-testid=\"seller-username\">\n                        {seller.username}\n                      </h3>\n                      <Badge className={`text-xs font-bold px-2 py-1 rounded text-white ${getLevelBadgeColor(seller.level)}`}>\n                        LV {seller.level}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"flex\">\n                        {renderStars(seller.rating)}\n                      </div>\n                      <span className=\"text-sm text-muted-foreground\">\n                        ({seller.rating.toFixed(1)})\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator className=\"my-4\" />\n\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Member since:</span>\n                    <span data-testid=\"seller-join-date\">\n                      {seller.joinDate.toLocaleDateString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Total trades:</span>\n                    <span data-testid=\"seller-total-trades\">\n                      {seller.totalTrades}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Reviews:</span>\n                    <span data-testid=\"seller-review-count\">\n                      {seller.reviewCount}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Response rate:</span>\n                    <span className=\"text-green-400\">98%</span>\n                  </div>\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full mt-4\"\n                  onClick={() => {/* TODO: Open seller profile */}}\n                  data-testid=\"view-seller-profile-button\"\n                >\n                  <i className=\"fas fa-user mr-2\"></i>\n                  View Profile\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Security Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Security & Safety</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 text-sm\">\n                <div className=\"flex items-center space-x-2 text-green-400\">\n                  <i className=\"fas fa-shield-check\"></i>\n                  <span>Secure escrow protection</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-green-400\">\n                  <i className=\"fas fa-undo\"></i>\n                  <span>7-day account guarantee</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-green-400\">\n                  <i className=\"fas fa-headset\"></i>\n                  <span>24/7 customer support</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-green-400\">\n                  <i className=\"fas fa-user-check\"></i>\n                  <span>Verified seller</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountDetails;\n","size_bytes":17783},"client/src/pages/Admin.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useAuth } from '../contexts/AuthContext';\nimport { ref, onValue, update, remove } from 'firebase/database';\nimport { database } from '../lib/firebase';\nimport { useToast } from '@/hooks/use-toast';\nimport { WalletRequest, SupportTicket, User } from '@shared/schema';\n\nconst Admin: React.FC = () => {\n  const { userProfile } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('wallet-requests');\n  const [walletRequests, setWalletRequests] = useState<WalletRequest[]>([]);\n  const [supportTickets, setSupportTickets] = useState<SupportTicket[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (userProfile?.role !== 'admin') return;\n\n    // Listen to wallet requests\n    const walletRequestsRef = ref(database, 'walletRequests');\n    const unsubscribeWalletRequests = onValue(walletRequestsRef, (snapshot) => {\n      if (snapshot.exists()) {\n        const data = snapshot.val();\n        const requests: WalletRequest[] = Object.entries(data).map(([id, request]: [string, any]) => ({\n          id,\n          ...request,\n          createdAt: new Date(request.createdAt),\n          processedAt: request.processedAt ? new Date(request.processedAt) : undefined\n        }));\n        setWalletRequests(requests.filter(r => r.status === 'pending'));\n      } else {\n        setWalletRequests([]);\n      }\n    });\n\n    // Listen to support tickets\n    const supportTicketsRef = ref(database, 'supportTickets');\n    const unsubscribeSupportTickets = onValue(supportTicketsRef, (snapshot) => {\n      if (snapshot.exists()) {\n        const data = snapshot.val();\n        const tickets: SupportTicket[] = Object.entries(data).map(([id, ticket]: [string, any]) => ({\n          id,\n          ...ticket,\n          createdAt: new Date(ticket.createdAt),\n          updatedAt: new Date(ticket.updatedAt),\n          resolvedAt: ticket.resolvedAt ? new Date(ticket.resolvedAt) : undefined\n        }));\n        setSupportTickets(tickets.filter(t => t.status === 'open' || t.status === 'in_progress'));\n      } else {\n        setSupportTickets([]);\n      }\n    });\n\n    // Listen to users\n    const usersRef = ref(database, 'users');\n    const unsubscribeUsers = onValue(usersRef, (snapshot) => {\n      if (snapshot.exists()) {\n        const data = snapshot.val();\n        const usersList: User[] = Object.entries(data).map(([id, user]: [string, any]) => ({\n          id,\n          ...user,\n          joinDate: new Date(user.joinDate),\n          lastActive: user.lastActive ? new Date(user.lastActive) : undefined\n        }));\n        setUsers(usersList);\n      } else {\n        setUsers([]);\n      }\n      setLoading(false);\n    });\n\n    return () => {\n      unsubscribeWalletRequests();\n      unsubscribeSupportTickets();\n      unsubscribeUsers();\n    };\n  }, [userProfile]);\n\n  const handleApproveWalletRequest = async (requestId: string, request: WalletRequest) => {\n    try {\n      const updates = {\n        [`walletRequests/${requestId}/status`]: 'approved',\n        [`walletRequests/${requestId}/adminId`]: userProfile?.id,\n        [`walletRequests/${requestId}/processedAt`]: new Date().toISOString(),\n        [`users/${request.userId}/walletBalance`]: (users.find(u => u.id === request.userId)?.walletBalance || 0) + request.amountAfterFee\n      };\n\n      await update(ref(database), updates);\n\n      // Add transaction record\n      const transactionRef = ref(database, `walletTransactions/${Date.now()}`);\n      await update(transactionRef, {\n        userId: request.userId,\n        type: 'topup',\n        amount: request.amountAfterFee,\n        description: `Wallet top-up approved (Request #${requestId})`,\n        status: 'completed',\n        createdAt: new Date().toISOString(),\n        completedAt: new Date().toISOString()\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Wallet request approved successfully!\"\n      });\n    } catch (error) {\n      console.error('Error approving wallet request:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve wallet request.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleRejectWalletRequest = async (requestId: string, reason?: string) => {\n    try {\n      const updates = {\n        [`walletRequests/${requestId}/status`]: 'rejected',\n        [`walletRequests/${requestId}/adminId`]: userProfile?.id,\n        [`walletRequests/${requestId}/adminNotes`]: reason || 'Request rejected by admin',\n        [`walletRequests/${requestId}/processedAt`]: new Date().toISOString()\n      };\n\n      await update(ref(database), updates);\n\n      toast({\n        title: \"Success\",\n        description: \"Wallet request rejected.\"\n      });\n    } catch (error) {\n      console.error('Error rejecting wallet request:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject wallet request.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleUpdateUserRole = async (userId: string, newRole: 'user' | 'vip' | 'admin') => {\n    try {\n      await update(ref(database, `users/${userId}`), { role: newRole });\n      \n      toast({\n        title: \"Success\",\n        description: `User role updated to ${newRole}.`\n      });\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleBanUser = async (userId: string, ban: boolean) => {\n    try {\n      await update(ref(database, `users/${userId}`), { isBanned: ban });\n      \n      toast({\n        title: \"Success\",\n        description: `User ${ban ? 'banned' : 'unbanned'} successfully.`\n      });\n    } catch (error) {\n      console.error('Error updating user ban status:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  if (userProfile?.role !== 'admin') {\n    return (\n      <div className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <Alert variant=\"destructive\">\n            <AlertDescription>\n              Access denied. Admin privileges required.\n            </AlertDescription>\n          </Alert>\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-500/20 text-yellow-400';\n      case 'approved': return 'bg-green-500/20 text-green-400';\n      case 'rejected': return 'bg-red-500/20 text-red-400';\n      case 'completed': return 'bg-green-500/20 text-green-400';\n      case 'open': return 'bg-blue-500/20 text-blue-400';\n      case 'in_progress': return 'bg-yellow-500/20 text-yellow-400';\n      case 'resolved': return 'bg-green-500/20 text-green-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-3xl font-bold mb-2\">Admin Dashboard</h2>\n              <p className=\"text-muted-foreground\">Manage users, orders, and platform operations</p>\n            </div>\n            <Badge variant=\"destructive\" className=\"bg-red-600/20 text-red-400 px-4 py-2\">\n              <i className=\"fas fa-shield-alt mr-2\"></i>\n              Admin Access\n            </Badge>\n          </div>\n        </div>\n\n        {/* Admin Stats */}\n        <div className=\"grid md:grid-cols-5 gap-6 mb-12\">\n          <Card data-testid=\"total-users-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-users text-blue-400 text-xl\"></i>\n                </div>\n                <span className=\"text-2xl font-bold\">{users.length}</span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Total Users</h3>\n              <p className=\"text-sm text-green-400\">\n                +{users.filter(u => new Date(u.joinDate) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)).length} this week\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"pending-requests-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-yellow-500/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-clock text-yellow-400 text-xl\"></i>\n                </div>\n                <span className=\"text-2xl font-bold\">{walletRequests.length}</span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Pending Requests</h3>\n              <p className=\"text-sm text-muted-foreground\">Wallet & withdrawals</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"open-tickets-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-red-500/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-exclamation-triangle text-red-400 text-xl\"></i>\n                </div>\n                <span className=\"text-2xl font-bold\">{supportTickets.length}</span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Open Tickets</h3>\n              <p className=\"text-sm text-muted-foreground\">Need attention</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"vip-users-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-crown text-purple-400 text-xl\"></i>\n                </div>\n                <span className=\"text-2xl font-bold\">{users.filter(u => u.role === 'vip').length}</span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">VIP Users</h3>\n              <p className=\"text-sm text-muted-foreground\">Premium members</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"banned-users-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-red-500/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-ban text-red-400 text-xl\"></i>\n                </div>\n                <span className=\"text-2xl font-bold\">{users.filter(u => u.isBanned).length}</span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Banned Users</h3>\n              <p className=\"text-sm text-muted-foreground\">Restricted accounts</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Admin Tabs */}\n        <Card>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <CardHeader>\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"wallet-requests\" data-testid=\"wallet-requests-tab\">\n                  Wallet Requests ({walletRequests.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"user-management\" data-testid=\"user-management-tab\">\n                  User Management\n                </TabsTrigger>\n                <TabsTrigger value=\"support-tickets\" data-testid=\"support-tickets-tab\">\n                  Support Tickets ({supportTickets.length})\n                </TabsTrigger>\n              </TabsList>\n            </CardHeader>\n\n            <CardContent>\n              <TabsContent value=\"wallet-requests\" className=\"space-y-4\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-bold\">Pending Wallet Requests</h3>\n                  <Button variant=\"secondary\" size=\"sm\">\n                    <i className=\"fas fa-download mr-1\"></i>\n                    Export\n                  </Button>\n                </div>\n\n                {walletRequests.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-check-circle text-green-400 text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold mb-2\">All caught up!</h3>\n                    <p className=\"text-muted-foreground\">No pending wallet requests to review.</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {walletRequests.map((request) => {\n                      const user = users.find(u => u.id === request.userId);\n                      return (\n                        <Card key={request.id} className=\"border border-border\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex items-start justify-between mb-4\">\n                              <div>\n                                <div className=\"flex items-center space-x-3 mb-2\">\n                                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                                    <span className=\"text-xs text-primary-foreground\">\n                                      {user?.username[0]?.toUpperCase()}\n                                    </span>\n                                  </div>\n                                  <div>\n                                    <p className=\"font-semibold\">{user?.username}</p>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      Level {user?.level} â€¢ {user?.totalTrades} total trades\n                                    </p>\n                                  </div>\n                                </div>\n                                <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Type:</span>\n                                    <p className={`font-medium ${request.type === 'topup' ? 'text-green-400' : 'text-red-400'}`}>\n                                      {request.type === 'topup' ? 'Top-up' : 'Withdrawal'}\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">Amount:</span>\n                                    <p className=\"font-medium text-primary\">${request.amount.toFixed(2)}</p>\n                                  </div>\n                                  <div>\n                                    <span className=\"text-muted-foreground\">After Fee:</span>\n                                    <p className=\"font-medium text-green-400\">${request.amountAfterFee.toFixed(2)}</p>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <Badge className={getStatusColor(request.status)}>\n                                  {request.status}\n                                </Badge>\n                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                  {new Date(request.createdAt).toLocaleString()}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                              <Button\n                                size=\"sm\"\n                                className=\"bg-green-600 hover:bg-green-700\"\n                                onClick={() => handleApproveWalletRequest(request.id, request)}\n                                data-testid={`approve-request-${request.id}`}\n                              >\n                                <i className=\"fas fa-check mr-1\"></i>\n                                Approve\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => handleRejectWalletRequest(request.id)}\n                                data-testid={`reject-request-${request.id}`}\n                              >\n                                <i className=\"fas fa-times mr-1\"></i>\n                                Reject\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"user-management\" className=\"space-y-4\">\n                <div className=\"mb-6\">\n                  <h3 className=\"text-xl font-bold mb-4\">User Management</h3>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {users.slice(0, 10).map((user) => (\n                    <Card key={user.id} className=\"border border-border\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                              <span className=\"text-sm font-semibold text-primary-foreground\">\n                                {user.username[0].toUpperCase()}\n                              </span>\n                            </div>\n                            <div>\n                              <div className=\"flex items-center space-x-2\">\n                                <p className=\"font-semibold\">{user.username}</p>\n                                <Badge variant={user.role === 'admin' ? 'destructive' : user.role === 'vip' ? 'default' : 'secondary'}>\n                                  {user.role}\n                                </Badge>\n                                {user.isBanned && <Badge variant=\"destructive\">Banned</Badge>}\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Level {user.level} â€¢ ${user.walletBalance.toFixed(2)} â€¢ {user.totalTrades} trades\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleUpdateUserRole(user.id, user.role === 'vip' ? 'user' : 'vip')}\n                              data-testid={`toggle-vip-${user.id}`}\n                            >\n                              {user.role === 'vip' ? 'Remove VIP' : 'Make VIP'}\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant={user.isBanned ? 'default' : 'destructive'}\n                              onClick={() => handleBanUser(user.id, !user.isBanned)}\n                              data-testid={`toggle-ban-${user.id}`}\n                            >\n                              {user.isBanned ? 'Unban' : 'Ban'}\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"support-tickets\" className=\"space-y-4\">\n                <div className=\"mb-6\">\n                  <h3 className=\"text-xl font-bold\">Open Support Tickets</h3>\n                </div>\n\n                {supportTickets.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-check-circle text-green-400 text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-semibold mb-2\">All caught up!</h3>\n                    <p className=\"text-muted-foreground\">No open support tickets to review.</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {supportTickets.map((ticket) => {\n                      const user = users.find(u => u.id === ticket.userId);\n                      return (\n                        <Card key={ticket.id} className=\"border border-border\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex items-start justify-between mb-4\">\n                              <div>\n                                <h4 className=\"font-semibold mb-1\">{ticket.subject}</h4>\n                                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-2\">\n                                  <span>#{ticket.id}</span>\n                                  <span>{ticket.category}</span>\n                                  <span>{user?.username}</span>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground\">{ticket.description}</p>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge className={getStatusColor(ticket.status)}>\n                                  {ticket.status.replace('_', ' ')}\n                                </Badge>\n                                <Badge className={`text-xs ${ticket.priority === 'high' ? 'bg-red-500/20 text-red-400' : \n                                  ticket.priority === 'medium' ? 'bg-yellow-500/20 text-yellow-400' : \n                                  'bg-green-500/20 text-green-400'}`}>\n                                  {ticket.priority}\n                                </Badge>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-3\">\n                              <Button size=\"sm\" variant=\"outline\">\n                                <i className=\"fas fa-reply mr-1\"></i>\n                                Reply\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <i className=\"fas fa-check mr-1\"></i>\n                                Mark Resolved\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </TabsContent>\n            </CardContent>\n          </Tabs>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Admin;\n","size_bytes":23897},"client/src/pages/Chat.tsx":{"content":"import React from 'react';\nimport ChatInterface from '../components/ChatInterface';\nimport { ChatMessage } from '@shared/schema';\n\n// Mock data\nconst mockMessages: ChatMessage[] = [\n  {\n    id: '1',\n    orderId: 'GV-2024-001847',\n    senderId: 'seller1',\n    content: 'Hi! Thanks for purchasing my FIFA account. I\\'ll send you the login details shortly.',\n    timestamp: new Date('2024-12-15T14:34:00Z'),\n    isFiltered: false\n  },\n  {\n    id: '2',\n    orderId: 'GV-2024-001847',\n    senderId: 'buyer1',\n    content: 'Perfect! Looking forward to it. The account details look great from the screenshots.',\n    timestamp: new Date('2024-12-15T14:35:00Z'),\n    isFiltered: false\n  },\n  {\n    id: '3',\n    orderId: 'GV-2024-001847',\n    senderId: 'seller1',\n    content: 'Email: fifa_pro_2024@email.com Password: SecurePass123! Please change the password after login and confirm delivery once you\\'ve accessed the account.',\n    timestamp: new Date('2024-12-15T14:38:00Z'),\n    isFiltered: true,\n    filteredReason: 'Contact info sharing detected'\n  }\n];\n\nconst Chat: React.FC = () => {\n  const handleSendMessage = async (content: string) => {\n    // TODO: Implement Firebase message sending with contact info filtering\n    console.log('Sending message:', content);\n    \n    // Simulate contact info filtering\n    const contactInfoRegex = /@|\\.com|phone|discord|skype|telegram|whatsapp/i;\n    if (contactInfoRegex.test(content)) {\n      throw new Error('Message contains contact information and cannot be sent.');\n    }\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  };\n\n  const handleClose = () => {\n    window.history.back();\n  };\n\n  return (\n    <div className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <ChatInterface\n          orderId=\"GV-2024-001847\"\n          participant={{\n            id: 'seller1',\n            username: 'mike_trader',\n            isOnline: true\n          }}\n          messages={mockMessages}\n          onSendMessage={handleSendMessage}\n          onClose={handleClose}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","size_bytes":2136},"client/src/pages/Dashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAuth } from '../contexts/AuthContext';\n\n// Mock data\nconst MOCK_ORDERS = [\n  {\n    id: 'GV-2024-001847',\n    title: 'FIFA 24 Account Purchase',\n    amount: 299.00,\n    status: 'escrow',\n    date: '2024-12-15',\n    type: 'purchase',\n    seller: { username: 'mike_trader' }\n  },\n  {\n    id: 'GV-2024-001823',\n    title: 'Valorant Account Sale',\n    amount: 427.50,\n    status: 'delivered',\n    date: '2024-12-12',\n    type: 'sale',\n    buyer: { username: 'kelly_player' }\n  }\n];\n\nconst Dashboard: React.FC = () => {\n  const { userProfile } = useAuth();\n  const [activeTab, setActiveTab] = useState('active-orders');\n\n  if (!userProfile) {\n    return <div>Loading...</div>;\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'escrow': return 'bg-yellow-500/20 text-yellow-400';\n      case 'delivered': return 'bg-green-500/20 text-green-400';\n      case 'pending': return 'bg-blue-500/20 text-blue-400';\n      case 'completed': return 'bg-green-500/20 text-green-400';\n      case 'cancelled': return 'bg-red-500/20 text-red-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getLevelProgress = () => {\n    const nextLevelRequirement = userProfile.level * 500;\n    const progress = (userProfile.totalTrades / nextLevelRequirement) * 100;\n    return Math.min(progress, 100);\n  };\n\n  return (\n    <div className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold mb-2\">Dashboard</h2>\n          <p className=\"text-muted-foreground\">Manage your account, orders, and wallet</p>\n        </div>\n\n        {/* User Stats Cards */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-12\">\n          <Card data-testid=\"wallet-balance-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-wallet text-primary text-xl\"></i>\n                </div>\n                <span className=\"text-2xl font-bold\" data-testid=\"wallet-balance\">\n                  ${userProfile.walletBalance.toFixed(2)}\n                </span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Wallet Balance</h3>\n              <p className=\"text-sm text-muted-foreground\">Available for purchases</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"total-trades-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-chart-line text-green-400 text-xl\"></i>\n                </div>\n                <span className=\"text-2xl font-bold\" data-testid=\"total-trades\">\n                  {userProfile.totalTrades}\n                </span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Total Trades</h3>\n              <p className=\"text-sm text-muted-foreground\">Completed transactions</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"rating-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-star text-purple-400 text-xl\"></i>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <span className=\"text-2xl font-bold\" data-testid=\"user-rating\">\n                    {userProfile.rating.toFixed(1)}\n                  </span>\n                  <i className=\"fas fa-star text-yellow-400\"></i>\n                </div>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Rating</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                From {userProfile.reviewCount} reviews\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"level-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"level-badge w-12 h-12 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-trophy text-white text-xl\"></i>\n                </div>\n                <span className=\"text-2xl font-bold\" data-testid=\"user-level\">\n                  Level {userProfile.level}\n                </span>\n              </div>\n              <h3 className=\"font-semibold mb-1\">Account Level</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {(userProfile.level * 500) - userProfile.totalTrades} trades to Level {userProfile.level + 1}\n              </p>\n              <div className=\"w-full bg-muted rounded-full h-2 mt-2\">\n                <div\n                  className=\"bg-gradient-to-r from-green-500 to-blue-500 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${getLevelProgress()}%` }}\n                ></div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Dashboard Tabs */}\n        <Card>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <CardHeader>\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"active-orders\" data-testid=\"active-orders-tab\">\n                  Active Orders\n                </TabsTrigger>\n                <TabsTrigger value=\"my-listings\" data-testid=\"my-listings-tab\">\n                  My Listings\n                </TabsTrigger>\n                <TabsTrigger value=\"order-history\" data-testid=\"order-history-tab\">\n                  Order History\n                </TabsTrigger>\n                <TabsTrigger value=\"profile-settings\" data-testid=\"profile-settings-tab\">\n                  Profile Settings\n                </TabsTrigger>\n              </TabsList>\n            </CardHeader>\n\n            <CardContent>\n              <TabsContent value=\"active-orders\" className=\"space-y-4\">\n                {MOCK_ORDERS.map((order) => (\n                  <Card key={order.id} className=\"border border-border\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg mb-2\" data-testid={`order-title-${order.id}`}>\n                            {order.title}\n                          </h3>\n                          <div className=\"flex items-center space-x-4 text-sm\">\n                            <span className=\"text-muted-foreground\">Order ID:</span>\n                            <span className=\"font-mono\" data-testid={`order-id-${order.id}`}>\n                              #{order.id}\n                            </span>\n                            <Badge className={`text-xs ${getStatusColor(order.status)}`}>\n                              {order.status === 'escrow' ? 'In Escrow' : order.status}\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <span \n                            className={`text-xl font-bold ${order.type === 'sale' ? 'text-green-400' : 'text-primary'}`}\n                            data-testid={`order-amount-${order.id}`}\n                          >\n                            {order.type === 'sale' ? '+' : ''}${order.amount.toFixed(2)}\n                          </span>\n                          <p className=\"text-sm text-muted-foreground\">{order.date}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                            <span className=\"text-xs text-primary-foreground\">\n                              {(order.seller?.username || order.buyer?.username)?.[0]?.toUpperCase()}\n                            </span>\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium\">\n                              {order.seller?.username || order.buyer?.username}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {order.type === 'purchase' ? 'Seller' : 'Buyer'}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            data-testid={`chat-button-${order.id}`}\n                          >\n                            <i className=\"fas fa-comment mr-1\"></i>\n                            Chat\n                          </Button>\n                          {order.status === 'escrow' && order.type === 'purchase' && (\n                            <Button\n                              size=\"sm\"\n                              className=\"bg-green-600 hover:bg-green-700\"\n                              data-testid={`confirm-delivery-${order.id}`}\n                            >\n                              <i className=\"fas fa-check mr-1\"></i>\n                              Confirm Delivery\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </TabsContent>\n\n              <TabsContent value=\"my-listings\">\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-box-open text-muted-foreground text-4xl mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold mb-2\">No active listings</h3>\n                  <p className=\"text-muted-foreground mb-4\">Start selling your gaming accounts today!</p>\n                  <Button data-testid=\"create-listing-button\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create Listing\n                  </Button>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"order-history\">\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-history text-muted-foreground text-4xl mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold mb-2\">Order history will appear here</h3>\n                  <p className=\"text-muted-foreground\">Your completed transactions will be shown here.</p>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"profile-settings\">\n                <div className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">Profile Information</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium\">Username</label>\n                        <p className=\"text-muted-foreground\" data-testid=\"profile-username\">\n                          {userProfile.username}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Email</label>\n                        <p className=\"text-muted-foreground\" data-testid=\"profile-email\">\n                          {userProfile.email}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Join Date</label>\n                        <p className=\"text-muted-foreground\" data-testid=\"profile-join-date\">\n                          {userProfile.joinDate.toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Account Status</label>\n                        <Badge variant={userProfile.isVerified ? 'default' : 'secondary'}>\n                          {userProfile.isVerified ? 'Verified' : 'Unverified'}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </CardContent>\n          </Tabs>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","size_bytes":13111},"client/src/pages/Home.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport GameCard from '../components/GameCard';\n\nconst GAMES = [\n  {\n    id: 'fifa',\n    name: 'FIFA 24',\n    image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250',\n    accountCount: 1247\n  },\n  {\n    id: 'valorant',\n    name: 'Valorant',\n    image: 'https://images.unsplash.com/photo-1542751371-adc38448a05e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250',\n    accountCount: 892\n  },\n  {\n    id: 'lol',\n    name: 'League of Legends',\n    image: 'https://images.unsplash.com/photo-1511512578047-dfb367046420?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250',\n    accountCount: 2134\n  },\n  {\n    id: 'pubg',\n    name: 'PUBG',\n    image: 'https://images.unsplash.com/photo-1538481199705-c710c4e965fc?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250',\n    accountCount: 567\n  },\n  {\n    id: 'cod',\n    name: 'Call of Duty',\n    image: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250',\n    accountCount: 743\n  }\n];\n\nconst Home: React.FC = () => {\n  const handleGameClick = (gameId: string) => {\n    window.location.href = `/marketplace?game=${gameId}`;\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4 sm:px-6 lg:px-8 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-transparent to-purple-500/10\"></div>\n        <div className=\"relative max-w-7xl mx-auto\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text text-transparent\">\n              Trade Game Accounts <br/>\n              <span className=\"gradient-primary bg-clip-text text-transparent\">Safely & Securely</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Buy and sell premium gaming accounts with our secure escrow system. Level up your gaming experience today.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/marketplace\">\n                <Button className=\"gradient-primary text-primary-foreground px-8 py-3 hover:scale-105 transition-transform glow\" data-testid=\"browse-marketplace-button\">\n                  <i className=\"fas fa-store mr-2\"></i>\n                  Browse Marketplace\n                </Button>\n              </Link>\n              <Link href=\"/sell\">\n                <Button variant=\"secondary\" className=\"px-8 py-3\" data-testid=\"sell-account-button\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Sell Account\n                </Button>\n              </Link>\n            </div>\n          </div>\n\n          {/* Game Selection Grid */}\n          <div className=\"mt-16\">\n            <h2 className=\"text-2xl font-bold text-center mb-8\">Popular Games</h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-6\">\n              {GAMES.map((game) => (\n                <GameCard\n                  key={game.id}\n                  game={game}\n                  onClick={handleGameClick}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Home;\n","size_bytes":3447},"client/src/pages/Login.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '../contexts/AuthContext';\nimport { handleRedirectResult } from '../lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\n\nconst Login: React.FC = () => {\n  const { currentUser, login, register, loginWithGoogle } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [isLogin, setIsLogin] = useState(true);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    username: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Handle OAuth redirect result\n  useEffect(() => {\n    const handleOAuthRedirect = async () => {\n      try {\n        const result = await handleRedirectResult();\n        if (result) {\n          toast({\n            title: \"Success\",\n            description: \"Successfully logged in with Google!\"\n          });\n        }\n      } catch (error: any) {\n        console.error('OAuth redirect error:', error);\n        setError(error.message);\n      }\n    };\n\n    handleOAuthRedirect();\n  }, [toast]);\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (currentUser) {\n      navigate('/');\n    }\n  }, [currentUser, navigate]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      if (isLogin) {\n        await login(formData.email, formData.password);\n        toast({\n          title: \"Success\",\n          description: \"Welcome back!\"\n        });\n      } else {\n        if (!formData.username.trim()) {\n          throw new Error('Username is required');\n        }\n        await register(formData.email, formData.password, formData.username);\n        toast({\n          title: \"Success\",\n          description: \"Account created successfully! Welcome to GameVault!\"\n        });\n      }\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleLogin = async () => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      await loginWithGoogle();\n    } catch (error: any) {\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <i className=\"fas fa-gamepad text-primary text-3xl mr-2\"></i>\n            <span className=\"text-2xl font-bold\">GameVault</span>\n          </div>\n          <CardTitle className=\"text-2xl text-center\">\n            {isLogin ? 'Welcome back' : 'Create account'}\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            {isLogin \n              ? 'Enter your credentials to access your account'\n              : 'Enter your information to create your account'\n            }\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {!isLogin && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  name=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  value={formData.username}\n                  onChange={handleInputChange}\n                  required={!isLogin}\n                  data-testid=\"username-input\"\n                />\n              </div>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                required\n                data-testid=\"email-input\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                required\n                data-testid=\"password-input\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full gradient-primary\" \n              disabled={loading}\n              data-testid=\"auth-submit-button\"\n            >\n              {loading ? (\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n              ) : null}\n              {isLogin ? 'Sign In' : 'Create Account'}\n            </Button>\n          </form>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <Separator className=\"w-full\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n            </div>\n          </div>\n\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={handleGoogleLogin}\n            disabled={loading}\n            className=\"w-full\"\n            data-testid=\"google-login-button\"\n          >\n            <i className=\"fab fa-google mr-2\"></i>\n            Google\n          </Button>\n\n          <div className=\"text-center text-sm\">\n            <span className=\"text-muted-foreground\">\n              {isLogin ? \"Don't have an account?\" : \"Already have an account?\"}\n            </span>{' '}\n            <button\n              type=\"button\"\n              onClick={() => {\n                setIsLogin(!isLogin);\n                setError('');\n                setFormData({ email: '', password: '', username: '' });\n              }}\n              className=\"text-primary hover:underline\"\n              data-testid=\"toggle-auth-mode\"\n            >\n              {isLogin ? 'Sign up' : 'Sign in'}\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Login;\n","size_bytes":7186},"client/src/pages/Marketplace.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport AccountCard from '../components/AccountCard';\nimport { GameAccount } from '@shared/schema';\n\n// Mock data - in real app this would come from Firebase\nconst MOCK_ACCOUNTS: (GameAccount & { seller: { username: string; level: number; rating: number; } })[] = [\n  {\n    id: '1',\n    sellerId: 'seller1',\n    game: 'fifa',\n    title: 'Premium FIFA 24 Account - 95 OVR Team',\n    description: 'High-end FIFA Ultimate Team account with incredible players...',\n    price: 299,\n    images: ['https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250'],\n    gameSpecificData: {\n      level: 87,\n      coins: '2.5M',\n      rating: '95 OVR',\n      region: 'NA'\n    },\n    status: 'active',\n    views: 145,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    seller: {\n      username: 'mike_trader',\n      level: 4,\n      rating: 4.9\n    }\n  },\n  {\n    id: '2',\n    sellerId: 'seller2',\n    game: 'valorant',\n    title: 'Immortal Valorant Account - All Agents',\n    description: 'High-rank Valorant account with all agents unlocked...',\n    price: 450,\n    images: ['https://images.unsplash.com/photo-1593305841991-05c297ba4575?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250'],\n    gameSpecificData: {\n      rank: 'Immortal 2',\n      rr: 2847,\n      agents: '22/22',\n      skins: 47\n    },\n    status: 'active',\n    views: 89,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    seller: {\n      username: 'alex_pro',\n      level: 3,\n      rating: 5.0\n    }\n  }\n];\n\nconst Marketplace: React.FC = () => {\n  const [location] = useLocation();\n  const [accounts, setAccounts] = useState(MOCK_ACCOUNTS);\n  const [filteredAccounts, setFilteredAccounts] = useState(MOCK_ACCOUNTS);\n  const [filters, setFilters] = useState({\n    game: '',\n    priceMin: '',\n    priceMax: '',\n    minRating: 1,\n    sortBy: 'newest'\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const accountsPerPage = 9;\n\n  // Get game filter from URL\n  useEffect(() => {\n    const params = new URLSearchParams(location.split('?')[1] || '');\n    const gameParam = params.get('game');\n    if (gameParam) {\n      setFilters(prev => ({ ...prev, game: gameParam }));\n    }\n  }, [location]);\n\n  // Apply filters\n  useEffect(() => {\n    let filtered = [...accounts];\n\n    // Game filter\n    if (filters.game) {\n      filtered = filtered.filter(account => account.game === filters.game);\n    }\n\n    // Price range filter\n    if (filters.priceMin) {\n      filtered = filtered.filter(account => account.price >= parseFloat(filters.priceMin));\n    }\n    if (filters.priceMax) {\n      filtered = filtered.filter(account => account.price <= parseFloat(filters.priceMax));\n    }\n\n    // Rating filter\n    filtered = filtered.filter(account => account.seller.rating >= filters.minRating);\n\n    // Sort\n    switch (filters.sortBy) {\n      case 'price_low':\n        filtered.sort((a, b) => a.price - b.price);\n        break;\n      case 'price_high':\n        filtered.sort((a, b) => b.price - a.price);\n        break;\n      case 'rating':\n        filtered.sort((a, b) => b.seller.rating - a.seller.rating);\n        break;\n      case 'popular':\n        filtered.sort((a, b) => b.views - a.views);\n        break;\n      case 'newest':\n      default:\n        filtered.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n        break;\n    }\n\n    setFilteredAccounts(filtered);\n    setCurrentPage(1);\n  }, [accounts, filters]);\n\n  const handleAccountClick = (accountId: string) => {\n    window.location.href = `/account/${accountId}`;\n  };\n\n  const handleFilterChange = (key: string, value: any) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  // Pagination\n  const totalPages = Math.ceil(filteredAccounts.length / accountsPerPage);\n  const startIndex = (currentPage - 1) * accountsPerPage;\n  const paginatedAccounts = filteredAccounts.slice(startIndex, startIndex + accountsPerPage);\n\n  return (\n    <div className=\"py-16 px-4 sm:px-6 lg:px-8 bg-card/30\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Filters Sidebar */}\n          <div className=\"lg:w-1/4\">\n            <Card className=\"sticky top-24\">\n              <CardHeader>\n                <CardTitle>Filters</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Game Filter */}\n                <div>\n                  <Label className=\"text-sm font-medium mb-3 block\">Game</Label>\n                  <Select value={filters.game} onValueChange={(value) => handleFilterChange('game', value)}>\n                    <SelectTrigger data-testid=\"game-filter\">\n                      <SelectValue placeholder=\"All Games\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"\">All Games</SelectItem>\n                      <SelectItem value=\"fifa\">FIFA 24</SelectItem>\n                      <SelectItem value=\"valorant\">Valorant</SelectItem>\n                      <SelectItem value=\"lol\">League of Legends</SelectItem>\n                      <SelectItem value=\"pubg\">PUBG</SelectItem>\n                      <SelectItem value=\"cod\">Call of Duty</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Price Range */}\n                <div>\n                  <Label className=\"text-sm font-medium mb-3 block\">Price Range</Label>\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Min\"\n                      value={filters.priceMin}\n                      onChange={(e) => handleFilterChange('priceMin', e.target.value)}\n                      className=\"flex-1\"\n                      data-testid=\"price-min-input\"\n                    />\n                    <span className=\"text-muted-foreground\">-</span>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Max\"\n                      value={filters.priceMax}\n                      onChange={(e) => handleFilterChange('priceMax', e.target.value)}\n                      className=\"flex-1\"\n                      data-testid=\"price-max-input\"\n                    />\n                  </div>\n                </div>\n\n                {/* Seller Rating */}\n                <div>\n                  <Label className=\"text-sm font-medium mb-3 block\">Minimum Seller Rating</Label>\n                  <div className=\"flex space-x-1 mb-2\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <i\n                        key={star}\n                        className={`${\n                          star <= filters.minRating ? 'fas fa-star text-yellow-400' : 'far fa-star text-muted-foreground'\n                        } cursor-pointer`}\n                        onClick={() => handleFilterChange('minRating', star)}\n                      />\n                    ))}\n                  </div>\n                  <Slider\n                    value={[filters.minRating]}\n                    onValueChange={(value) => handleFilterChange('minRating', value[0])}\n                    min={1}\n                    max={5}\n                    step={0.5}\n                    className=\"w-full\"\n                    data-testid=\"rating-slider\"\n                  />\n                </div>\n\n                {/* Sort By */}\n                <div>\n                  <Label className=\"text-sm font-medium mb-3 block\">Sort By</Label>\n                  <Select value={filters.sortBy} onValueChange={(value) => handleFilterChange('sortBy', value)}>\n                    <SelectTrigger data-testid=\"sort-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"newest\">Newest First</SelectItem>\n                      <SelectItem value=\"price_low\">Price: Low to High</SelectItem>\n                      <SelectItem value=\"price_high\">Price: High to Low</SelectItem>\n                      <SelectItem value=\"popular\">Most Popular</SelectItem>\n                      <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Marketplace Results */}\n          <div className=\"lg:w-3/4\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-2xl font-bold\">Available Accounts</h2>\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <span data-testid=\"results-count\">{filteredAccounts.length}</span>\n                <span>results found</span>\n              </div>\n            </div>\n\n            {/* Account Listings Grid */}\n            <div className=\"grid md:grid-cols-2 xl:grid-cols-3 gap-6 mb-8\" data-testid=\"accounts-grid\">\n              {paginatedAccounts.map((account) => (\n                <AccountCard\n                  key={account.id}\n                  account={account}\n                  onClick={handleAccountClick}\n                />\n              ))}\n            </div>\n\n            {filteredAccounts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-search text-muted-foreground text-4xl mb-4\"></i>\n                <h3 className=\"text-lg font-semibold mb-2\">No accounts found</h3>\n                <p className=\"text-muted-foreground\">Try adjusting your filters to see more results.</p>\n              </div>\n            )}\n\n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"flex justify-center items-center space-x-4 mt-12\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                  disabled={currentPage === 1}\n                  data-testid=\"prev-page-button\"\n                >\n                  <i className=\"fas fa-chevron-left mr-1\"></i>\n                  Previous\n                </Button>\n                \n                <div className=\"flex space-x-2\">\n                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                    const pageNum = i + 1;\n                    return (\n                      <Button\n                        key={pageNum}\n                        variant={currentPage === pageNum ? \"default\" : \"secondary\"}\n                        onClick={() => setCurrentPage(pageNum)}\n                        className=\"w-10 h-10\"\n                        data-testid={`page-${pageNum}-button`}\n                      >\n                        {pageNum}\n                      </Button>\n                    );\n                  })}\n                </div>\n                \n                <Button\n                  variant=\"secondary\"\n                  onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                  disabled={currentPage === totalPages}\n                  data-testid=\"next-page-button\"\n                >\n                  Next\n                  <i className=\"fas fa-chevron-right ml-1\"></i>\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Marketplace;\n","size_bytes":11897},"client/src/pages/SellAccount.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { ref, push, set } from 'firebase/database';\nimport { ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { database, storage } from '../lib/firebase';\nimport { InsertGameAccount } from '@shared/schema';\nimport { GAMES } from '../utils/constants';\n\nconst SellAccount: React.FC = () => {\n  const { currentUser, userProfile } = useAuth();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    game: '',\n    title: '',\n    description: '',\n    price: '',\n    images: [] as File[]\n  });\n  const [gameSpecificFields, setGameSpecificFields] = useState<Record<string, any>>({});\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  const handleGameChange = (game: string) => {\n    setFormData(prev => ({ ...prev, game }));\n    setGameSpecificFields({});\n  };\n\n  const handleGameFieldChange = (field: string, value: any) => {\n    setGameSpecificFields(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length + formData.images.length > 5) {\n      toast({\n        title: \"Too many images\",\n        description: \"You can upload up to 5 images per account.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setFormData(prev => ({\n      ...prev,\n      images: [...prev.images, ...files]\n    }));\n  };\n\n  const removeImage = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      images: prev.images.filter((_, i) => i !== index)\n    }));\n  };\n\n  const uploadImages = async (files: File[]): Promise<string[]> => {\n    const uploadPromises = files.map(async (file, index) => {\n      const fileName = `accounts/${currentUser!.uid}/${Date.now()}_${index}.${file.name.split('.').pop()}`;\n      const fileRef = storageRef(storage, fileName);\n      \n      await uploadBytes(fileRef, file);\n      return getDownloadURL(fileRef);\n    });\n\n    return Promise.all(uploadPromises);\n  };\n\n  const renderGameSpecificFields = () => {\n    switch (formData.game) {\n      case 'fifa':\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"platform\">Platform</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('platform', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select platform\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"PS4\">PlayStation 4</SelectItem>\n                  <SelectItem value=\"PS5\">PlayStation 5</SelectItem>\n                  <SelectItem value=\"Xbox\">Xbox</SelectItem>\n                  <SelectItem value=\"PC\">PC</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"coins\">FIFA Coins</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 2500000\"\n                onChange={(e) => handleGameFieldChange('coins', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"level\">Level</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 87\"\n                onChange={(e) => handleGameFieldChange('level', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"overallRating\">Overall Rating</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 95\"\n                onChange={(e) => handleGameFieldChange('overallRating', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"region\">Region</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('region', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select region\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"NA\">North America</SelectItem>\n                  <SelectItem value=\"EU\">Europe</SelectItem>\n                  <SelectItem value=\"AS\">Asia</SelectItem>\n                  <SelectItem value=\"SA\">South America</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"transferBan\"\n                onChange={(e) => handleGameFieldChange('transferBan', e.target.checked)}\n              />\n              <Label htmlFor=\"transferBan\">Transfer Ban</Label>\n            </div>\n          </div>\n        );\n\n      case 'valorant':\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"rank\">Current Rank</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('rank', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select rank\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Iron\">Iron</SelectItem>\n                  <SelectItem value=\"Bronze\">Bronze</SelectItem>\n                  <SelectItem value=\"Silver\">Silver</SelectItem>\n                  <SelectItem value=\"Gold\">Gold</SelectItem>\n                  <SelectItem value=\"Platinum\">Platinum</SelectItem>\n                  <SelectItem value=\"Diamond\">Diamond</SelectItem>\n                  <SelectItem value=\"Immortal\">Immortal</SelectItem>\n                  <SelectItem value=\"Radiant\">Radiant</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"rr\">Rank Rating (RR)</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 2847\"\n                onChange={(e) => handleGameFieldChange('rr', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"agents\">Agents Owned</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 22\"\n                max=\"25\"\n                onChange={(e) => handleGameFieldChange('agents', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"skins\">Weapon Skins</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 47\"\n                onChange={(e) => handleGameFieldChange('skins', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"level\">Account Level</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 150\"\n                onChange={(e) => handleGameFieldChange('level', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"region\">Region</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('region', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select region\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"NA\">North America</SelectItem>\n                  <SelectItem value=\"EU\">Europe</SelectItem>\n                  <SelectItem value=\"AP\">Asia-Pacific</SelectItem>\n                  <SelectItem value=\"KR\">Korea</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        );\n\n      case 'lol':\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"rank\">Current Rank</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('rank', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select rank\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Iron\">Iron</SelectItem>\n                  <SelectItem value=\"Bronze\">Bronze</SelectItem>\n                  <SelectItem value=\"Silver\">Silver</SelectItem>\n                  <SelectItem value=\"Gold\">Gold</SelectItem>\n                  <SelectItem value=\"Platinum\">Platinum</SelectItem>\n                  <SelectItem value=\"Diamond\">Diamond</SelectItem>\n                  <SelectItem value=\"Master\">Master</SelectItem>\n                  <SelectItem value=\"Grandmaster\">Grandmaster</SelectItem>\n                  <SelectItem value=\"Challenger\">Challenger</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"lp\">League Points (LP)</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 1247\"\n                onChange={(e) => handleGameFieldChange('lp', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"champions\">Champions Owned</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 158\"\n                max=\"164\"\n                onChange={(e) => handleGameFieldChange('champions', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"skins\">Champion Skins</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 89\"\n                onChange={(e) => handleGameFieldChange('skins', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"level\">Account Level</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 247\"\n                onChange={(e) => handleGameFieldChange('level', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"blueEssence\">Blue Essence</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 50000\"\n                onChange={(e) => handleGameFieldChange('blueEssence', parseInt(e.target.value) || 0)}\n              />\n            </div>\n          </div>\n        );\n\n      case 'pubg':\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"rank\">Current Rank</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('rank', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select rank\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Bronze\">Bronze</SelectItem>\n                  <SelectItem value=\"Silver\">Silver</SelectItem>\n                  <SelectItem value=\"Gold\">Gold</SelectItem>\n                  <SelectItem value=\"Platinum\">Platinum</SelectItem>\n                  <SelectItem value=\"Diamond\">Diamond</SelectItem>\n                  <SelectItem value=\"Crown\">Crown</SelectItem>\n                  <SelectItem value=\"Ace\">Ace</SelectItem>\n                  <SelectItem value=\"Conqueror\">Conqueror</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"tier\">Tier</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('tier', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select tier\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"V\">V</SelectItem>\n                  <SelectItem value=\"IV\">IV</SelectItem>\n                  <SelectItem value=\"III\">III</SelectItem>\n                  <SelectItem value=\"II\">II</SelectItem>\n                  <SelectItem value=\"I\">I</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"level\">Account Level</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 67\"\n                onChange={(e) => handleGameFieldChange('level', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"bp\">Battle Points (BP)</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 15000\"\n                onChange={(e) => handleGameFieldChange('bp', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"skins\">Weapon/Vehicle Skins</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 23\"\n                onChange={(e) => handleGameFieldChange('skins', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"region\">Region</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('region', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select region\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"NA\">North America</SelectItem>\n                  <SelectItem value=\"EU\">Europe</SelectItem>\n                  <SelectItem value=\"AS\">Asia</SelectItem>\n                  <SelectItem value=\"SA\">South America</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        );\n\n      case 'cod':\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"rank\">Current Rank</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('rank', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select rank\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Bronze\">Bronze</SelectItem>\n                  <SelectItem value=\"Silver\">Silver</SelectItem>\n                  <SelectItem value=\"Gold\">Gold</SelectItem>\n                  <SelectItem value=\"Platinum\">Platinum</SelectItem>\n                  <SelectItem value=\"Diamond\">Diamond</SelectItem>\n                  <SelectItem value=\"Crimson\">Crimson</SelectItem>\n                  <SelectItem value=\"Iridescent\">Iridescent</SelectItem>\n                  <SelectItem value=\"Top 250\">Top 250</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"level\">Account Level</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 155\"\n                onChange={(e) => handleGameFieldChange('level', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"prestige\">Prestige</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 5\"\n                max=\"10\"\n                onChange={(e) => handleGameFieldChange('prestige', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"kd\">K/D Ratio</Label>\n              <Input\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"e.g., 1.85\"\n                onChange={(e) => handleGameFieldChange('kd', parseFloat(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"wins\">Total Wins</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"e.g., 247\"\n                onChange={(e) => handleGameFieldChange('wins', parseInt(e.target.value) || 0)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"region\">Region</Label>\n              <Select onValueChange={(value) => handleGameFieldChange('region', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select region\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"NA\">North America</SelectItem>\n                  <SelectItem value=\"EU\">Europe</SelectItem>\n                  <SelectItem value=\"AS\">Asia</SelectItem>\n                  <SelectItem value=\"SA\">South America</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!currentUser || !userProfile) {\n      toast({\n        title: \"Error\",\n        description: \"You must be logged in to sell an account.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!formData.game || !formData.title || !formData.description || !formData.price) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const price = parseFloat(formData.price);\n    if (isNaN(price) || price <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid price.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setUploading(true);\n    setUploadProgress(20);\n\n    try {\n      // Upload images\n      let imageUrls: string[] = [];\n      if (formData.images.length > 0) {\n        setUploadProgress(50);\n        imageUrls = await uploadImages(formData.images);\n      }\n\n      setUploadProgress(80);\n\n      // Create account listing\n      const accountData: InsertGameAccount = {\n        sellerId: currentUser.uid,\n        game: formData.game as any,\n        title: formData.title,\n        description: formData.description,\n        price,\n        images: imageUrls,\n        gameSpecificData: gameSpecificFields,\n        status: 'active'\n      };\n\n      const accountsRef = ref(database, 'gameAccounts');\n      const newAccountRef = push(accountsRef);\n      \n      await set(newAccountRef, {\n        ...accountData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        views: 0\n      });\n\n      setUploadProgress(100);\n\n      toast({\n        title: \"Success!\",\n        description: \"Your account has been listed successfully.\",\n      });\n\n      // Reset form\n      setFormData({\n        game: '',\n        title: '',\n        description: '',\n        price: '',\n        images: []\n      });\n      setGameSpecificFields({});\n\n      // Redirect to marketplace\n      setTimeout(() => {\n        window.location.href = '/marketplace';\n      }, 2000);\n\n    } catch (error) {\n      console.error('Error creating listing:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create listing. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  if (!currentUser) {\n    return (\n      <div className=\"py-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <Alert>\n            <AlertDescription>\n              You must be logged in to sell an account. Please log in and try again.\n            </AlertDescription>\n          </Alert>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold mb-2\">Sell Your Game Account</h2>\n          <p className=\"text-muted-foreground\">\n            List your gaming account for sale on our secure marketplace\n          </p>\n        </div>\n\n        <Card>\n          <CardContent className=\"p-8\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Game Selection */}\n              <div>\n                <Label htmlFor=\"game\">Game *</Label>\n                <Select value={formData.game} onValueChange={handleGameChange}>\n                  <SelectTrigger data-testid=\"game-select\">\n                    <SelectValue placeholder=\"Select a game\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {GAMES.map((game) => (\n                      <SelectItem key={game.id} value={game.id}>\n                        {game.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Basic Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"title\">Account Title *</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"e.g., Premium FIFA 24 Account - 95 OVR Team\"\n                    value={formData.title}\n                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                    maxLength={100}\n                    data-testid=\"title-input\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"price\">Price (USD) *</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    placeholder=\"299.99\"\n                    min=\"1\"\n                    step=\"0.01\"\n                    value={formData.price}\n                    onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                    data-testid=\"price-input\"\n                  />\n                </div>\n              </div>\n\n              {/* Description */}\n              <div>\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Provide detailed information about your account including achievements, unlocked content, progression, etc.\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  maxLength={1000}\n                  className=\"h-32\"\n                  data-testid=\"description-textarea\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {formData.description.length}/1000 characters\n                </p>\n              </div>\n\n              {/* Game-Specific Fields */}\n              {formData.game && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-4\">\n                    {GAMES.find(g => g.id === formData.game)?.name} Specific Details\n                  </h3>\n                  {renderGameSpecificFields()}\n                </div>\n              )}\n\n              {/* Image Upload */}\n              <div>\n                <Label htmlFor=\"images\">Account Screenshots (up to 5 images)</Label>\n                <div className=\"space-y-4\">\n                  <Input\n                    id=\"images\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    multiple\n                    onChange={handleImageUpload}\n                    disabled={formData.images.length >= 5}\n                    data-testid=\"image-upload\"\n                  />\n                  \n                  {formData.images.length > 0 && (\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                      {formData.images.map((file, index) => (\n                        <div key={index} className=\"relative\">\n                          <img\n                            src={URL.createObjectURL(file)}\n                            alt={`Screenshot ${index + 1}`}\n                            className=\"w-full h-32 object-cover rounded-lg\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"absolute top-2 right-2 h-6 w-6 p-0\"\n                            onClick={() => removeImage(index)}\n                          >\n                            <i className=\"fas fa-times text-xs\"></i>\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Terms and Submit */}\n              <div className=\"space-y-4\">\n                <Alert>\n                  <i className=\"fas fa-info-circle\"></i>\n                  <AlertDescription>\n                    <strong>Important:</strong> By listing your account, you agree to our terms of service.\n                    GameVault takes a 5% commission on successful sales. Accounts must be legitimate and\n                    accurately described to avoid suspension.\n                  </AlertDescription>\n                </Alert>\n\n                {uploading && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Uploading...</span>\n                      <span>{uploadProgress}%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div\n                        className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${uploadProgress}%` }}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full gradient-primary text-lg py-3\"\n                  disabled={uploading}\n                  data-testid=\"submit-listing-button\"\n                >\n                  {uploading ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Creating Listing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Create Listing\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default SellAccount;\n","size_bytes":27008},"client/src/pages/Support.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst Support: React.FC = () => {\n  const { userProfile } = useAuth();\n  const { toast } = useToast();\n  const [ticketForm, setTicketForm] = useState({\n    category: '',\n    subject: '',\n    orderId: '',\n    description: '',\n    priority: 'medium'\n  });\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!ticketForm.category || !ticketForm.subject || !ticketForm.description) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setSubmitting(true);\n    \n    try {\n      // TODO: Submit to Firebase and trigger email notification\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API call\n      \n      toast({\n        title: \"Success\",\n        description: \"Support ticket submitted successfully! We'll respond within 24 hours.\"\n      });\n      \n      setTicketForm({\n        category: '',\n        subject: '',\n        orderId: '',\n        description: '',\n        priority: 'medium'\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit ticket. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setTicketForm(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Mock tickets data\n  const tickets = [\n    {\n      id: 'ST-2024-0891',\n      subject: 'Payment not credited to wallet',\n      category: 'Payment & Wallet',\n      status: 'resolved',\n      priority: 'medium',\n      date: '2024-12-14',\n      lastUpdatedBy: 'Admin Sarah',\n      preview: 'I made a payment of $500 yesterday but it hasn\\'t been credited to my wallet yet. My transaction ID is...'\n    },\n    {\n      id: 'ST-2024-0887',\n      subject: 'Account verification issues',\n      category: 'Account Issues',\n      status: 'in_progress',\n      priority: 'high',\n      date: '2024-12-12',\n      lastUpdatedBy: 'You',\n      preview: 'Unable to complete account verification. The system keeps rejecting my documents even though...'\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'resolved': return 'bg-green-500/20 text-green-400';\n      case 'in_progress': return 'bg-yellow-500/20 text-yellow-400';\n      case 'open': return 'bg-blue-500/20 text-blue-400';\n      case 'closed': return 'bg-gray-500/20 text-gray-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-500/20 text-red-400';\n      case 'medium': return 'bg-yellow-500/20 text-yellow-400';\n      case 'low': return 'bg-green-500/20 text-green-400';\n      default: return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"py-16 px-4 sm:px-6 lg:px-8 bg-card/30\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold mb-2\">Support Center</h2>\n          <p className=\"text-muted-foreground\">Get help with your account, orders, and platform issues</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Create Ticket Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-ticket-alt text-primary\"></i>\n                  </div>\n                  <CardTitle>Create Support Ticket</CardTitle>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"category\">Category</Label>\n                    <Select \n                      value={ticketForm.category} \n                      onValueChange={(value) => handleInputChange('category', value)}\n                    >\n                      <SelectTrigger data-testid=\"category-select\">\n                        <SelectValue placeholder=\"Select a category\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"account\">Account Issues</SelectItem>\n                        <SelectItem value=\"payment\">Payment & Wallet</SelectItem>\n                        <SelectItem value=\"order\">Order Problems</SelectItem>\n                        <SelectItem value=\"technical\">Technical Issues</SelectItem>\n                        <SelectItem value=\"security\">Security Concerns</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Input\n                      id=\"subject\"\n                      placeholder=\"Brief description of your issue\"\n                      maxLength={100}\n                      value={ticketForm.subject}\n                      onChange={(e) => handleInputChange('subject', e.target.value)}\n                      data-testid=\"subject-input\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"orderId\">Order ID (if applicable)</Label>\n                    <Input\n                      id=\"orderId\"\n                      placeholder=\"#GV-2024-001847\"\n                      value={ticketForm.orderId}\n                      onChange={(e) => handleInputChange('orderId', e.target.value)}\n                      data-testid=\"order-id-input\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      placeholder=\"Provide detailed information about your issue...\"\n                      maxLength={1000}\n                      className=\"h-32\"\n                      value={ticketForm.description}\n                      onChange={(e) => handleInputChange('description', e.target.value)}\n                      data-testid=\"description-textarea\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Please be as specific as possible to help us resolve your issue quickly.\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label>Priority Level</Label>\n                    <RadioGroup \n                      value={ticketForm.priority} \n                      onValueChange={(value) => handleInputChange('priority', value)}\n                      className=\"grid grid-cols-3 gap-3 mt-2\"\n                    >\n                      <div className=\"flex items-center space-x-2 bg-input border border-border rounded-lg p-3 cursor-pointer hover:bg-input/80 transition-colors\">\n                        <RadioGroupItem value=\"low\" id=\"low\" />\n                        <div className=\"flex-1\">\n                          <Label htmlFor=\"low\" className=\"font-medium text-green-400 cursor-pointer\">Low</Label>\n                          <p className=\"text-xs text-muted-foreground\">General questions</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2 bg-input border border-border rounded-lg p-3 cursor-pointer hover:bg-input/80 transition-colors\">\n                        <RadioGroupItem value=\"medium\" id=\"medium\" />\n                        <div className=\"flex-1\">\n                          <Label htmlFor=\"medium\" className=\"font-medium text-yellow-400 cursor-pointer\">Medium</Label>\n                          <p className=\"text-xs text-muted-foreground\">Order issues</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2 bg-input border border-border rounded-lg p-3 cursor-pointer hover:bg-input/80 transition-colors\">\n                        <RadioGroupItem value=\"high\" id=\"high\" />\n                        <div className=\"flex-1\">\n                          <Label htmlFor=\"high\" className=\"font-medium text-red-400 cursor-pointer\">High</Label>\n                          <p className=\"text-xs text-muted-foreground\">Urgent problems</p>\n                        </div>\n                      </div>\n                    </RadioGroup>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full gradient-primary\" \n                    disabled={submitting}\n                    data-testid=\"submit-ticket-button\"\n                  >\n                    {submitting ? (\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    ) : (\n                      <i className=\"fas fa-paper-plane mr-2\"></i>\n                    )}\n                    Submit Ticket\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions & Info */}\n          <div className=\"space-y-6\">\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start bg-primary/20 text-primary border-primary/30\"\n                  data-testid=\"check-order-status-button\"\n                >\n                  <i className=\"fas fa-search mr-2\"></i>\n                  Check Order Status\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start bg-green-500/20 text-green-400 border-green-500/30\"\n                  data-testid=\"wallet-help-button\"\n                >\n                  <i className=\"fas fa-wallet mr-2\"></i>\n                  Wallet Help\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start bg-purple-500/20 text-purple-400 border-purple-500/30\"\n                  data-testid=\"account-recovery-button\"\n                >\n                  <i className=\"fas fa-key mr-2\"></i>\n                  Account Recovery\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Contact Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Contact Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-envelope text-primary\"></i>\n                  <div>\n                    <p className=\"font-medium\">Email Support</p>\n                    <p className=\"text-sm text-muted-foreground\">support@gamevault.com</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-clock text-primary\"></i>\n                  <div>\n                    <p className=\"font-medium\">Response Time</p>\n                    <p className=\"text-sm text-muted-foreground\">Within 24 hours</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <i className=\"fas fa-headset text-primary\"></i>\n                  <div>\n                    <p className=\"font-medium\">Live Chat</p>\n                    <p className=\"text-sm text-muted-foreground\">Monday - Friday, 9 AM - 6 PM</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* FAQ Quick Links */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Common Questions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <a href=\"#\" className=\"block text-sm text-primary hover:text-primary/80 transition-colors\">\n                  How does the escrow system work?\n                </a>\n                <a href=\"#\" className=\"block text-sm text-primary hover:text-primary/80 transition-colors\">\n                  How to level up my account?\n                </a>\n                <a href=\"#\" className=\"block text-sm text-primary hover:text-primary/80 transition-colors\">\n                  Wallet top-up fees explained\n                </a>\n                <a href=\"#\" className=\"block text-sm text-primary hover:text-primary/80 transition-colors\">\n                  Account safety guidelines\n                </a>\n                <a href=\"#\" className=\"block text-sm text-primary hover:text-primary/80 transition-colors\">\n                  How to report suspicious activity\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* My Tickets */}\n        <div className=\"mt-12\">\n          <Card>\n            <CardHeader>\n              <CardTitle>My Support Tickets</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"divide-y divide-border\">\n                {tickets.map((ticket) => (\n                  <div \n                    key={ticket.id} \n                    className=\"py-6 hover:bg-muted/30 transition-colors\"\n                    data-testid={`ticket-${ticket.id}`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-semibold mb-1\">{ticket.subject}</h4>\n                        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                          <span>Ticket #{ticket.id}</span>\n                          <span>{ticket.category}</span>\n                          <span>{ticket.date}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge className={`text-sm font-medium ${getStatusColor(ticket.status)}`}>\n                          {ticket.status.replace('_', ' ')}\n                        </Badge>\n                        <Badge className={`text-xs ${getPriorityColor(ticket.priority)}`}>\n                          {ticket.priority}\n                        </Badge>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                      {ticket.preview}\n                    </p>\n                    <div className=\"flex items-center space-x-4\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        data-testid={`view-ticket-${ticket.id}`}\n                      >\n                        <i className=\"fas fa-eye mr-1\"></i>\n                        View Details\n                      </Button>\n                      <span className=\"text-sm text-muted-foreground\">\n                        Last updated by <strong>{ticket.lastUpdatedBy}</strong>\n                        {ticket.lastUpdatedBy === 'You' && ' â€¢ 2 hours ago'}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Support;\n","size_bytes":16447},"client/src/pages/Wallet.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\n\nconst Wallet: React.FC = () => {\n  const { userProfile } = useAuth();\n  const { toast } = useToast();\n  const [topupForm, setTopupForm] = useState({\n    walletName: '',\n    amountPaid: '',\n    creditAmount: ''\n  });\n  const [withdrawForm, setWithdrawForm] = useState({\n    withdrawAmount: '',\n    afterFeeAmount: '',\n    withdrawMethod: '',\n    accountDetails: ''\n  });\n\n  if (!userProfile) {\n    return <div>Loading...</div>;\n  }\n\n  const calculateTopupCredit = (amountPaid: number) => {\n    return amountPaid * 0.95; // 5% fee deducted\n  };\n\n  const calculateWithdrawAfterFee = (amount: number) => {\n    return amount * 0.95; // 5% fee deducted\n  };\n\n  const handleTopupAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const amountPaid = parseFloat(e.target.value) || 0;\n    const creditAmount = calculateTopupCredit(amountPaid);\n    \n    setTopupForm(prev => ({\n      ...prev,\n      amountPaid: e.target.value,\n      creditAmount: creditAmount.toFixed(2)\n    }));\n  };\n\n  const handleWithdrawAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const withdrawAmount = parseFloat(e.target.value) || 0;\n    const afterFeeAmount = calculateWithdrawAfterFee(withdrawAmount);\n    \n    setWithdrawForm(prev => ({\n      ...prev,\n      withdrawAmount: e.target.value,\n      afterFeeAmount: afterFeeAmount.toFixed(2)\n    }));\n  };\n\n  const handleTopupSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!topupForm.walletName || !topupForm.amountPaid) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // TODO: Submit to Firebase\n    toast({\n      title: \"Success\",\n      description: \"Top-up request submitted successfully! We'll review it within 24 hours.\",\n    });\n    \n    setTopupForm({\n      walletName: '',\n      amountPaid: '',\n      creditAmount: ''\n    });\n  };\n\n  const handleWithdrawSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const amount = parseFloat(withdrawForm.withdrawAmount);\n    \n    if (!amount || amount <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid withdrawal amount.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (amount > userProfile.walletBalance) {\n      toast({\n        title: \"Error\",\n        description: \"Insufficient wallet balance.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!withdrawForm.withdrawMethod || !withdrawForm.accountDetails) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // TODO: Submit to Firebase\n    toast({\n      title: \"Success\",\n      description: \"Withdrawal request submitted successfully! Processing time: 3-5 business days.\",\n    });\n    \n    setWithdrawForm({\n      withdrawAmount: '',\n      afterFeeAmount: '',\n      withdrawMethod: '',\n      accountDetails: ''\n    });\n  };\n\n  // Mock transaction data\n  const transactions = [\n    {\n      id: '1',\n      type: 'topup',\n      description: 'Wallet Top-up',\n      amount: 500.00,\n      status: 'completed',\n      date: '2024-12-10T15:24:00Z'\n    },\n    {\n      id: '2',\n      type: 'purchase',\n      description: 'FIFA Account Purchase',\n      amount: -299.00,\n      status: 'completed',\n      date: '2024-12-08T13:15:00Z'\n    },\n    {\n      id: '3',\n      type: 'withdraw',\n      description: 'Withdrawal Request',\n      amount: -200.00,\n      status: 'pending',\n      date: '2024-12-05T09:42:00Z'\n    }\n  ];\n\n  return (\n    <div className=\"py-16 px-4 sm:px-6 lg:px-8 bg-card/30\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold mb-2\">Wallet Management</h2>\n          <p className=\"text-muted-foreground\">Top-up your wallet or request withdrawals</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Top-up Form */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-plus text-green-400\"></i>\n                </div>\n                <CardTitle>Top-up Wallet</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleTopupSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"walletName\">Wallet/Account Name</Label>\n                  <Input\n                    id=\"walletName\"\n                    placeholder=\"Your wallet or account name\"\n                    value={topupForm.walletName}\n                    onChange={(e) => setTopupForm(prev => ({ ...prev, walletName: e.target.value }))}\n                    data-testid=\"wallet-name-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"amountPaid\">Amount You Paid ($)</Label>\n                  <Input\n                    id=\"amountPaid\"\n                    type=\"number\"\n                    placeholder=\"1050.00\"\n                    min=\"10\"\n                    step=\"0.01\"\n                    value={topupForm.amountPaid}\n                    onChange={handleTopupAmountChange}\n                    data-testid=\"amount-paid-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"creditAmount\">Amount to Credit (After 5% Fee)</Label>\n                  <Input\n                    id=\"creditAmount\"\n                    placeholder=\"1000.00\"\n                    value={topupForm.creditAmount}\n                    readOnly\n                    className=\"bg-muted\"\n                    data-testid=\"credit-amount-display\"\n                  />\n                </div>\n\n                <Alert>\n                  <i className=\"fas fa-info-circle\"></i>\n                  <AlertDescription>\n                    <strong>Processing Fee: 5%</strong><br />\n                    A 5% processing fee applies to all top-ups. Your request will be reviewed by our team within 24 hours.\n                  </AlertDescription>\n                </Alert>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full gradient-primary\"\n                  data-testid=\"submit-topup-button\"\n                >\n                  <i className=\"fas fa-credit-card mr-2\"></i>\n                  Submit Top-up Request\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Withdraw Form */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-red-500/20 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-minus text-red-400\"></i>\n                </div>\n                <CardTitle>Withdraw Funds</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleWithdrawSubmit} className=\"space-y-4\">\n                <div>\n                  <Label>Available Balance</Label>\n                  <div className=\"bg-muted border border-border rounded-lg p-3\">\n                    <span className=\"text-lg font-bold text-primary\" data-testid=\"available-balance\">\n                      ${userProfile.walletBalance.toFixed(2)}\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"withdrawAmount\">Withdrawal Amount ($)</Label>\n                  <Input\n                    id=\"withdrawAmount\"\n                    type=\"number\"\n                    placeholder=\"500.00\"\n                    min=\"10\"\n                    max={userProfile.walletBalance}\n                    step=\"0.01\"\n                    value={withdrawForm.withdrawAmount}\n                    onChange={handleWithdrawAmountChange}\n                    data-testid=\"withdraw-amount-input\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"afterFeeAmount\">Amount After Fee (5% deducted)</Label>\n                  <Input\n                    id=\"afterFeeAmount\"\n                    placeholder=\"475.00\"\n                    value={withdrawForm.afterFeeAmount}\n                    readOnly\n                    className=\"bg-muted\"\n                    data-testid=\"after-fee-amount-display\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"withdrawMethod\">Withdrawal Method</Label>\n                  <Select \n                    value={withdrawForm.withdrawMethod} \n                    onValueChange={(value) => setWithdrawForm(prev => ({ ...prev, withdrawMethod: value }))}\n                  >\n                    <SelectTrigger data-testid=\"withdraw-method-select\">\n                      <SelectValue placeholder=\"Select withdrawal method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"paypal\">PayPal</SelectItem>\n                      <SelectItem value=\"bank\">Bank Transfer</SelectItem>\n                      <SelectItem value=\"crypto\">Cryptocurrency</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"accountDetails\">Account Details</Label>\n                  <Textarea\n                    id=\"accountDetails\"\n                    placeholder=\"Enter your account details (email, account number, etc.)\"\n                    value={withdrawForm.accountDetails}\n                    onChange={(e) => setWithdrawForm(prev => ({ ...prev, accountDetails: e.target.value }))}\n                    className=\"h-24\"\n                    data-testid=\"account-details-textarea\"\n                  />\n                </div>\n\n                <Alert className=\"border-yellow-500/20 bg-yellow-500/10\">\n                  <i className=\"fas fa-exclamation-triangle text-yellow-400\"></i>\n                  <AlertDescription>\n                    <strong className=\"text-yellow-400\">Withdrawal Fee: 5%</strong><br />\n                    Processing time: 3-5 business days. Minimum withdrawal: $10.00\n                  </AlertDescription>\n                </Alert>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-red-600 hover:bg-red-700\"\n                  data-testid=\"submit-withdraw-button\"\n                >\n                  <i className=\"fas fa-money-bill-wave mr-2\"></i>\n                  Submit Withdrawal Request\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Transaction History */}\n        <div className=\"mt-12\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Transactions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"divide-y divide-border\">\n                {transactions.map((transaction) => {\n                  const isPositive = transaction.amount > 0;\n                  const getIcon = () => {\n                    switch (transaction.type) {\n                      case 'topup': return 'fa-plus text-green-400';\n                      case 'purchase': return 'fa-shopping-cart text-red-400';\n                      case 'withdraw': return 'fa-clock text-yellow-400';\n                      default: return 'fa-exchange-alt text-primary';\n                    }\n                  };\n\n                  return (\n                    <div \n                      key={transaction.id} \n                      className=\"py-6 flex items-center justify-between hover:bg-muted/30 transition-colors\"\n                      data-testid={`transaction-${transaction.id}`}\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center\">\n                          <i className={`fas ${getIcon()}`}></i>\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">{transaction.description}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(transaction.date).toLocaleString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <span \n                          className={`text-lg font-bold ${\n                            isPositive ? 'text-green-400' : 'text-red-400'\n                          }`}\n                          data-testid={`transaction-amount-${transaction.id}`}\n                        >\n                          {isPositive ? '+' : ''}${Math.abs(transaction.amount).toFixed(2)}\n                        </span>\n                        <p className=\"text-sm text-muted-foreground capitalize\">\n                          {transaction.status}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Wallet;\n","size_bytes":14021},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/utils/constants.ts":{"content":"export const GAMES = [\n  {\n    id: 'fifa',\n    name: 'FIFA 24',\n    image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250'\n  },\n  {\n    id: 'valorant',\n    name: 'Valorant',\n    image: 'https://images.unsplash.com/photo-1542751371-adc38448a05e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250'\n  },\n  {\n    id: 'lol',\n    name: 'League of Legends',\n    image: 'https://images.unsplash.com/photo-1511512578047-dfb367046420?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250'\n  },\n  {\n    id: 'pubg',\n    name: 'PUBG',\n    image: 'https://images.unsplash.com/photo-1538481199705-c710c4e965fc?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250'\n  },\n  {\n    id: 'cod',\n    name: 'Call of Duty',\n    image: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250'\n  }\n];\n\nexport const USER_LEVELS = {\n  1: { requirement: 0, name: 'Novice' },\n  2: { requirement: 500, name: 'Trader' },\n  3: { requirement: 1000, name: 'Expert' },\n  4: { requirement: 1500, name: 'Master' },\n  5: { requirement: 2000, name: 'Legend' }\n};\n\nexport const WALLET_FEE_PERCENTAGE = 0.05; // 5% fee\n\nexport const CONTACT_INFO_REGEX = /@|\\.com|phone|discord|skype|telegram|whatsapp|email|gmail|yahoo|hotmail|\\+\\d{1,3}[-.\\s]?\\d|call\\s*me|text\\s*me|contact\\s*me/gi;\n\nexport const SUPPORT_CATEGORIES = [\n  { value: 'account', label: 'Account Issues' },\n  { value: 'payment', label: 'Payment & Wallet' },\n  { value: 'order', label: 'Order Problems' },\n  { value: 'technical', label: 'Technical Issues' },\n  { value: 'security', label: 'Security Concerns' },\n  { value: 'other', label: 'Other' }\n];\n\nexport const PRIORITY_LEVELS = [\n  { value: 'low', label: 'Low', description: 'General questions', color: 'text-green-400' },\n  { value: 'medium', label: 'Medium', description: 'Order issues', color: 'text-yellow-400' },\n  { value: 'high', label: 'High', description: 'Urgent problems', color: 'text-red-400' }\n];\n\nexport const ORDER_STATUSES = {\n  pending: { label: 'Pending', color: 'bg-blue-500/20 text-blue-400' },\n  escrow: { label: 'In Escrow', color: 'bg-yellow-500/20 text-yellow-400' },\n  delivered: { label: 'Delivered', color: 'bg-green-500/20 text-green-400' },\n  completed: { label: 'Completed', color: 'bg-green-500/20 text-green-400' },\n  disputed: { label: 'Disputed', color: 'bg-red-500/20 text-red-400' },\n  cancelled: { label: 'Cancelled', color: 'bg-gray-500/20 text-gray-400' }\n};\n\nexport const ACCOUNT_STATUSES = {\n  active: { label: 'Active', color: 'bg-green-500/20 text-green-400' },\n  sold: { label: 'Sold', color: 'bg-blue-500/20 text-blue-400' },\n  pending: { label: 'Reserved', color: 'bg-yellow-500/20 text-yellow-400' },\n  removed: { label: 'Removed', color: 'bg-red-500/20 text-red-400' }\n};\n","size_bytes":2798},"client/src/utils/helpers.ts":{"content":"export const formatCurrency = (amount: number, currency: string = 'USD'): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\nexport const formatNumber = (num: number): string => {\n  return new Intl.NumberFormat('en-US').format(num);\n};\n\nexport const formatRelativeTime = (date: Date): string => {\n  const now = new Date();\n  const diffInSeconds = (now.getTime() - date.getTime()) / 1000;\n  \n  if (diffInSeconds < 60) {\n    return 'just now';\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n  } else if (diffInSeconds < 2592000) {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days} day${days > 1 ? 's' : ''} ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n};\n\nexport const getUserLevel = (totalTrades: number): number => {\n  if (totalTrades >= 2000) return 5;\n  if (totalTrades >= 1500) return 4;\n  if (totalTrades >= 1000) return 3;\n  if (totalTrades >= 500) return 2;\n  return 1;\n};\n\nexport const getNextLevelRequirement = (currentLevel: number): number => {\n  switch (currentLevel) {\n    case 1: return 500;\n    case 2: return 1000;\n    case 3: return 1500;\n    case 4: return 2000;\n    default: return 2000;\n  }\n};\n\nexport const getLevelProgress = (totalTrades: number, currentLevel: number): number => {\n  const nextLevelReq = getNextLevelRequirement(currentLevel);\n  const prevLevelReq = currentLevel > 1 ? getNextLevelRequirement(currentLevel - 1) : 0;\n  \n  const progress = ((totalTrades - prevLevelReq) / (nextLevelReq - prevLevelReq)) * 100;\n  return Math.min(Math.max(progress, 0), 100);\n};\n\nexport const getLevelBadgeColor = (level: number): string => {\n  if (level >= 5) return 'bg-gradient-to-r from-pink-500 to-violet-500';\n  if (level >= 4) return 'bg-gradient-to-r from-purple-500 to-pink-500';\n  if (level >= 3) return 'bg-gradient-to-r from-green-500 to-blue-500';\n  if (level >= 2) return 'bg-gradient-to-r from-blue-500 to-cyan-500';\n  return 'bg-gradient-to-r from-gray-500 to-gray-600';\n};\n\nexport const getGameBadgeColor = (game: string): string => {\n  switch (game) {\n    case 'fifa': return 'bg-green-500/20 text-green-400';\n    case 'valorant': return 'bg-red-500/20 text-red-400';\n    case 'lol': return 'bg-blue-500/20 text-blue-400';\n    case 'pubg': return 'bg-yellow-500/20 text-yellow-400';\n    case 'cod': return 'bg-orange-500/20 text-orange-400';\n    default: return 'bg-gray-500/20 text-gray-400';\n  }\n};\n\nexport const getStatusBadgeColor = (status: string): string => {\n  switch (status) {\n    case 'active':\n    case 'completed':\n    case 'approved':\n    case 'resolved':\n      return 'bg-green-500/20 text-green-400';\n    \n    case 'pending':\n    case 'escrow':\n    case 'in_progress':\n      return 'bg-yellow-500/20 text-yellow-400';\n    \n    case 'delivered':\n    case 'open':\n      return 'bg-blue-500/20 text-blue-400';\n    \n    case 'cancelled':\n    case 'rejected':\n    case 'removed':\n    case 'closed':\n      return 'bg-red-500/20 text-red-400';\n    \n    default:\n      return 'bg-gray-500/20 text-gray-400';\n  }\n};\n\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n};\n\nexport const generateOrderId = (): string => {\n  const timestamp = Date.now().toString();\n  const random = Math.random().toString(36).substring(2, 8).toUpperCase();\n  return `GV-${timestamp.slice(-6)}-${random}`;\n};\n\nexport const generateTicketId = (): string => {\n  const timestamp = Date.now().toString();\n  const random = Math.random().toString(36).substring(2, 6).toUpperCase();\n  return `ST-${new Date().getFullYear()}-${timestamp.slice(-4)}${random}`;\n};\n\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const isValidUsername = (username: string): boolean => {\n  const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\n  return usernameRegex.test(username);\n};\n\nexport const sanitizeInput = (input: string): string => {\n  return input.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n              .replace(/[<>]/g, '');\n};\n\nexport const debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): ((...args: Parameters<T>) => void) => {\n  let timeoutId: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func(...args), delay);\n  };\n};\n\nexport const throttle = <T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): ((...args: Parameters<T>) => void) => {\n  let lastExecution = 0;\n  \n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    if (now - lastExecution >= delay) {\n      func(...args);\n      lastExecution = now;\n    }\n  };\n};\n\nexport const copyToClipboard = async (text: string): Promise<boolean> => {\n  try {\n    if (navigator.clipboard && navigator.clipboard.writeText) {\n      await navigator.clipboard.writeText(text);\n      return true;\n    } else {\n      // Fallback for older browsers\n      const textArea = document.createElement('textarea');\n      textArea.value = text;\n      textArea.style.position = 'fixed';\n      textArea.style.left = '-999999px';\n      textArea.style.top = '-999999px';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      const result = document.execCommand('copy');\n      document.body.removeChild(textArea);\n      return result;\n    }\n  } catch (error) {\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n};\n\nexport const downloadFile = (data: any, filename: string, type: string = 'application/json'): void => {\n  const file = new Blob([typeof data === 'string' ? data : JSON.stringify(data, null, 2)], { type });\n  const url = URL.createObjectURL(file);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n","size_bytes":6358},"client/src/utils/validation.ts":{"content":"import { z } from 'zod';\n\nexport const emailSchema = z.string().email('Please enter a valid email address');\n\nexport const passwordSchema = z.string().min(6, 'Password must be at least 6 characters');\n\nexport const usernameSchema = z\n  .string()\n  .min(3, 'Username must be at least 3 characters')\n  .max(20, 'Username must be less than 20 characters')\n  .regex(/^[a-zA-Z0-9_]+$/, 'Username can only contain letters, numbers, and underscores');\n\nexport const priceSchema = z\n  .number()\n  .min(1, 'Price must be at least $1')\n  .max(10000, 'Price cannot exceed $10,000');\n\nexport const titleSchema = z\n  .string()\n  .min(10, 'Title must be at least 10 characters')\n  .max(100, 'Title must be less than 100 characters');\n\nexport const descriptionSchema = z\n  .string()\n  .min(50, 'Description must be at least 50 characters')\n  .max(1000, 'Description must be less than 1000 characters');\n\nexport const walletAmountSchema = z\n  .number()\n  .min(10, 'Minimum amount is $10')\n  .max(5000, 'Maximum amount is $5,000');\n\nexport const supportSubjectSchema = z\n  .string()\n  .min(5, 'Subject must be at least 5 characters')\n  .max(100, 'Subject must be less than 100 characters');\n\nexport const supportDescriptionSchema = z\n  .string()\n  .min(20, 'Description must be at least 20 characters')\n  .max(1000, 'Description must be less than 1000 characters');\n\nexport const chatMessageSchema = z\n  .string()\n  .min(1, 'Message cannot be empty')\n  .max(500, 'Message must be less than 500 characters');\n\nexport const contactInfoFilter = (text: string): boolean => {\n  const contactRegex = /@|\\.com|phone|discord|skype|telegram|whatsapp|email|gmail|yahoo|hotmail|\\+\\d{1,3}[-.\\s]?\\d|call\\s*me|text\\s*me|contact\\s*me/gi;\n  return contactRegex.test(text);\n};\n\nexport const validateGameSpecificData = (game: string, data: Record<string, any>): { isValid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n\n  switch (game) {\n    case 'fifa':\n      if (!data.platform) errors.push('Platform is required');\n      if (!data.coins || data.coins < 0) errors.push('FIFA Coins must be specified');\n      if (!data.level || data.level < 1 || data.level > 100) errors.push('Level must be between 1-100');\n      if (!data.overallRating || data.overallRating < 1 || data.overallRating > 99) errors.push('Overall Rating must be between 1-99');\n      if (!data.region) errors.push('Region is required');\n      break;\n\n    case 'valorant':\n      if (!data.rank) errors.push('Rank is required');\n      if (!data.rr || data.rr < 0) errors.push('Rank Rating must be specified');\n      if (!data.agents || data.agents < 0 || data.agents > 25) errors.push('Agents must be between 0-25');\n      if (!data.level || data.level < 1) errors.push('Account level is required');\n      if (!data.region) errors.push('Region is required');\n      break;\n\n    case 'lol':\n      if (!data.rank) errors.push('Rank is required');\n      if (!data.lp || data.lp < 0) errors.push('League Points must be specified');\n      if (!data.champions || data.champions < 0 || data.champions > 164) errors.push('Champions must be between 0-164');\n      if (!data.level || data.level < 1) errors.push('Account level is required');\n      break;\n\n    case 'pubg':\n      if (!data.rank) errors.push('Rank is required');\n      if (!data.tier) errors.push('Tier is required');\n      if (!data.level || data.level < 1) errors.push('Account level is required');\n      if (!data.region) errors.push('Region is required');\n      break;\n\n    case 'cod':\n      if (!data.rank) errors.push('Rank is required');\n      if (!data.level || data.level < 1) errors.push('Account level is required');\n      if (data.prestige !== undefined && (data.prestige < 0 || data.prestige > 10)) {\n        errors.push('Prestige must be between 0-10');\n      }\n      if (!data.region) errors.push('Region is required');\n      break;\n\n    default:\n      errors.push('Invalid game selected');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\nexport const calculateFee = (amount: number, feePercentage: number = 0.05): { \n  amountAfterFee: number; \n  feeAmount: number; \n  originalAmount: number \n} => {\n  const feeAmount = amount * feePercentage;\n  const amountAfterFee = amount - feeAmount;\n  \n  return {\n    amountAfterFee: Math.round(amountAfterFee * 100) / 100,\n    feeAmount: Math.round(feeAmount * 100) / 100,\n    originalAmount: amount\n  };\n};\n\nexport const calculateRequiredPayment = (desiredCredit: number, feePercentage: number = 0.05): number => {\n  // If user wants $1000 credit with 5% fee, they need to pay $1052.63\n  // Because $1052.63 - (5% of $1052.63) = $1000\n  return Math.round((desiredCredit / (1 - feePercentage)) * 100) / 100;\n};\n","size_bytes":4690},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}